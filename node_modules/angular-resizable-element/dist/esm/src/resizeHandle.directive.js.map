{"version":3,"sources":["../../../src/resizeHandle.directive.ts"],"names":[],"mappings":"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","file":"resizeHandle.directive.js","sourceRoot":"","sourcesContent":["import { Directive, Input, HostListener, Renderer2, ElementRef, OnDestroy, NgZone } from '@angular/core';\nimport { Resizable } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```\n * &lt;div mwlResizable&gt;\n *   &lt;div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"&gt;&lt;/div&gt;\n * &lt;/div&gt;\n * ```\n */\n\nexport class ResizeHandle implements OnDestroy {\n\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n   resizeEdges: Edges = {};\n\n  /**\n   * @private\n   */\n  public resizable: Resizable; // set by the parent mwlResizable directive\n\n  private eventListeners: {\n    touchmove?: Function,\n    mousemove?: Function\n  } = {};\n\n  constructor(private renderer: Renderer2, private element: ElementRef, private zone: NgZone) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @private\n   */\n  \n  \n  onMousedown(event: any, mouseX: number, mouseY: number): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(this.element.nativeElement, 'touchmove', (event: any) => {\n          this.onMousemove(event, event.targetTouches[0].clientX, event.targetTouches[0].clientY);\n        });\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(this.element.nativeElement, 'mousemove', (event: any) => {\n          this.onMousemove(event, event.clientX, event.clientY);\n        });\n      }\n      this.resizable.mousedown.next({mouseX, mouseY, edges: this.resizeEdges});\n    });\n  }\n\n  /**\n   * @private\n   */\n  \n  \n  \n  onMouseup(mouseX: number, mouseY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({mouseX, mouseY, edges: this.resizeEdges});\n    });\n  }\n\n  private onMousemove(event: any, mouseX: number, mouseY: number): void {\n    this.resizable.mousemove.next({mouseX, mouseY, edges: this.resizeEdges, event});\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(type => {\n      this.eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlResizeHandle]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'resizeEdges': [{ type: Input },],\n'onMousedown': [{ type: HostListener, args: ['touchstart', ['$event', '$event.touches[0].clientX', '$event.touches[0].clientY'], ] },{ type: HostListener, args: ['mousedown', ['$event', '$event.clientX', '$event.clientY'], ] },],\n'onMouseup': [{ type: HostListener, args: ['touchend', ['$event.changedTouches[0].clientX', '$event.changedTouches[0].clientY'], ] },{ type: HostListener, args: ['touchcancel', ['$event.changedTouches[0].clientX', '$event.changedTouches[0].clientY'], ] },{ type: HostListener, args: ['mouseup', ['$event.clientX', '$event.clientY'], ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}