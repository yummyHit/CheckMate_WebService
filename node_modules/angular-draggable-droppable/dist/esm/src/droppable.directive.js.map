{"version":3,"sources":["../../../src/droppable.directive.ts"],"names":[],"mappings":"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","file":"droppable.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  OnInit,\n  ElementRef,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  NgZone\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/pairwise';\nimport 'rxjs/add/operator/filter';\nimport { DraggableHelper } from './draggable-helper.provider';\n\nfunction isCoordinateWithinRectangle(\n  clientX: number,\n  clientY: number,\n  rect: ClientRect\n): boolean {\n  return (\n    clientX >= rect.left &&\n    clientX <= rect.right &&\n    clientY >= rect.top &&\n    clientY <= rect.bottom\n  );\n}\n\nexport interface DropData {\n  dropData: any;\n}\n\n\nexport class DroppableDirective implements OnInit, OnDestroy {\n   dragEnter: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n   dragLeave: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n   dragOver: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n   drop: EventEmitter<DropData> = new EventEmitter<DropData>();\n\n  currentDragSubscription: Subscription;\n\n  constructor(\n    private element: ElementRef,\n    private draggableHelper: DraggableHelper,\n    private zone: NgZone\n  ) {}\n\n  ngOnInit(): void {\n    interface CurrentDragData {\n      clientX: number;\n      clientY: number;\n      dropData: any;\n    }\n\n    this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(\n      (drag: Subject<CurrentDragData>) => {\n        const droppableRectangle: ClientRect = this.element.nativeElement.getBoundingClientRect();\n\n        let currentDragDropData: any;\n        const overlaps: Observable<\n          boolean\n        > = drag.map(({ clientX, clientY, dropData }) => {\n          currentDragDropData = dropData;\n          return isCoordinateWithinRectangle(\n            clientX,\n            clientY,\n            droppableRectangle\n          );\n        });\n\n        const overlapsChanged: Observable<\n          boolean\n        > = overlaps.distinctUntilChanged();\n\n        let dragOverActive: boolean; // TODO - see if there's a way of doing this via rxjs\n\n        overlapsChanged.filter(overlapsNow => overlapsNow).subscribe(() => {\n          dragOverActive = true;\n          this.zone.run(() => {\n            this.dragEnter.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlaps.filter(overlapsNow => overlapsNow).subscribe(() => {\n          this.zone.run(() => {\n            this.dragOver.next({\n              dropData: currentDragDropData\n            });\n          });\n        });\n\n        overlapsChanged\n          .pairwise()\n          .filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow)\n          .subscribe(() => {\n            dragOverActive = false;\n            this.zone.run(() => {\n              this.dragLeave.next({\n                dropData: currentDragDropData\n              });\n            });\n          });\n\n        drag.flatMap(() => overlaps).subscribe({\n          complete: () => {\n            if (dragOverActive) {\n              this.zone.run(() => {\n                this.drop.next({\n                  dropData: currentDragDropData\n                });\n              });\n            }\n          }\n        });\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.currentDragSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlDroppable]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: DraggableHelper, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dragEnter': [{ type: Output },],\n'dragLeave': [{ type: Output },],\n'dragOver': [{ type: Output },],\n'drop': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}