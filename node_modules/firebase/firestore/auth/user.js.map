{"version":3,"sources":["src/firestore/auth/user.ts"],"names":["User","uid","prototype","isUnauthenticated","toKey","equals","otherUser","UNAUTHENTICATED","GOOGLE_CREDENTIALS","FIRST_PARTY"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAgBA;;;;AAIA,IAAAA,OAAA,aAAA,YAAA;AASE,aAAAA,IAAA,CAAqBC,GAArB,EAAuC;AAAlB,aAAAA,GAAA,GAAAA,GAAA;AAAsB;AAE3CD,SAAAE,SAAA,CAAAC,iBAAA,GAAA,YAAA;AACE,eAAO,KAAKF,GAAL,IAAY,IAAnB;AACD,KAFD;AAIA;;;;AAIAD,SAAAE,SAAA,CAAAE,KAAA,GAAA,YAAA;AACE,YAAI,KAAKD,iBAAL,EAAJ,EAA8B;AAC5B,mBAAO,gBAAP;AACD,SAFD,MAEO;AACL,mBAAO,SAAS,KAAKF,GAArB;AACD;AACF,KAND;AAQAD,SAAAE,SAAA,CAAAG,MAAA,GAAA,UAAOC,SAAP,EAAsB;AACpB,eAAOA,UAAUL,GAAV,KAAkB,KAAKA,GAA9B;AACD,KAFD;AA1BA;AACgBD,SAAAO,eAAA,GAAkB,IAAIP,IAAJ,CAAS,IAAT,CAAlB;AAEhB;AACA;AACgBA,SAAAQ,kBAAA,GAAqB,IAAIR,IAAJ,CAAS,wBAAT,CAArB;AACAA,SAAAS,WAAA,GAAc,IAAIT,IAAJ,CAAS,iBAAT,CAAd;AAuBlB,WAAAA,IAAA;AA9BA,CAAA,EAAA;QAAaA,I,GAAAA,I","file":"user.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nexport class User {\n  /** A user with a null UID. */\n  static readonly UNAUTHENTICATED = new User(null);\n\n  // TODO(mikelehen): Look into getting a proper uid-equivalent for\n  // non-FirebaseAuth providers.\n  static readonly GOOGLE_CREDENTIALS = new User('google-credentials-uid');\n  static readonly FIRST_PARTY = new User('first-party-uid');\n\n  constructor(readonly uid: string | null) {}\n\n  isUnauthenticated(): boolean {\n    return this.uid == null;\n  }\n\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey(): string {\n    if (this.isUnauthenticated()) {\n      return 'anonymous-user';\n    } else {\n      return 'uid:' + this.uid;\n    }\n  }\n\n  equals(otherUser: User): boolean {\n    return otherUser.uid === this.uid;\n  }\n}\n"]}