{"version":3,"sources":["src/firestore/util/types.ts"],"names":["isNullOrUndefined","isSafeInteger","safeIsNaN","NumberAsAny","Number","MIN_SAFE_INTEGER","Math","pow","MAX_SAFE_INTEGER","isInteger","value","isFinite","floor","undefined","IsNaN","isNaN"],"mappings":";;;;;QAoDMA,iB,GAAAA,iB;QAQAC,a,GAAAA,a;QAWAC,S,GAAAA,S;AAvEN;;;;;;;;;;;;;;;AAkBA;AACA;AACA,IAAMC,cAAcC,MAApB;AAEA;;;;AAIO,IAAIC,8CACTF,YAAYE,gBAAZ,IAAgC,EAAEC,KAAKC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAApB,CAD3B;AAGP;;;;AAIO,IAAIC,8CACTL,YAAYK,gBAAZ,IAAgCF,KAAKC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAD7C;AAGP;;;;;;AAMO,IAAIE,gCACTN,YAAYM,SAAZ,IACC,UAAAC,KAAA,EAAK;AACJ,SAAA,OAAOA,KAAP,KAAiB,QAAjB,IACAC,SAASD,KAAT,CADA,IAEAJ,KAAKM,KAAL,CAAWF,KAAX,MAAsBA,KAFtB;AAE2B,CALxB;AAOP;;;AAGM,SAAAV,iBAAA,CAA4BU,KAA5B,EAAwC;AAC5C,SAAOA,UAAU,IAAV,IAAkBA,UAAUG,SAAnC;AACD;AAED;;;;AAIM,SAAAZ,aAAA,CAAwBS,KAAxB,EAAoC;AACxC,SACED,UAAUC,KAAV,KACCA,SAAoBF,gBADrB,IAECE,SAAoBL,gBAHvB;AAKD;AAED;;;AAGM,SAAAH,SAAA,CAAoBQ,KAApB,EAAgC;AACpC,MAAIP,YAAYW,KAAhB,EAAuB;AACrB,WAAOX,YAAYW,KAAZ,CAAkBJ,KAAlB,CAAP;AACD,GAFD,MAEO;AACL,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BK,MAAML,KAAN,CAApC;AACD;AACF","file":"types.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnyJs } from './misc';\n\n// Untyped Number alias we can use to check for ES6 methods / properties.\n// tslint:disable-next-line:no-any variable-name\nconst NumberAsAny = Number as any;\n\n/**\n * Minimum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport let MIN_SAFE_INTEGER: number =\n  NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);\n\n/**\n * Maximum safe integer in Javascript because of floating point precision.\n * Added to not rely on ES6 features.\n */\nexport let MAX_SAFE_INTEGER: number =\n  NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\n/**\n * Returns whether an number is an integer, uses native implementation if\n * available.\n * Added to not rely on ES6 features.\n * @param value The value to test for being an integer\n */\nexport let isInteger: (value: AnyJs) => boolean =\n  NumberAsAny.isInteger ||\n  (value =>\n    typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value);\n\n/**\n * Returns whether a variable is either undefined or null.\n */\nexport function isNullOrUndefined(value: AnyJs): boolean {\n  return value === null || value === undefined;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value The value to test for being an integer and in the safe range\n */\nexport function isSafeInteger(value: AnyJs): boolean {\n  return (\n    isInteger(value) &&\n    (value as number) <= MAX_SAFE_INTEGER &&\n    (value as number) >= MIN_SAFE_INTEGER\n  );\n}\n\n/**\n * Safely checks if the number is NaN.\n */\nexport function safeIsNaN(value: AnyJs): boolean {\n  if (NumberAsAny.IsNaN) {\n    return NumberAsAny.IsNaN(value);\n  } else {\n    return typeof value === 'number' && isNaN(value);\n  }\n}\n"]}