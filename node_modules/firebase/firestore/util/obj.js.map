{"version":3,"sources":["src/firestore/util/obj.ts"],"names":["contains","get","size","defaulted","forEachNumber","forEach","lookupOrInsert","isEmpty","shallowCopy","obj","key","Object","prototype","hasOwnProperty","call","count","value","defaultValue","undefined","fn","num","parseInt","isNaN","valFn","result"],"mappings":"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","file":"obj.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\nexport interface Dict<V> {\n  [stringKey: string]: V;\n  [numberKey: number]: V;\n}\n\nexport function contains<V>(obj: Dict<V>, key: string | number): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function get<V>(obj: Dict<V>, key: string | number): V | null {\n  return Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : null;\n}\n\nexport function size<V>(obj: Dict<V>): number {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/** Returns the given value if it's defined or the defaultValue otherwise. */\nexport function defaulted<V>(value: V | undefined, defaultValue: V): V {\n  return value !== undefined ? value : defaultValue;\n}\n\nexport function forEachNumber<V>(\n  obj: Dict<V>,\n  fn: (key: number, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const num = parseInt(key, 10);\n      if (!isNaN(num)) {\n        fn(num, obj[key]);\n      }\n    }\n  }\n}\n\nexport function forEach<V>(\n  obj: Dict<V>,\n  fn: (key: string, val: V) => void\n): void {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nexport function lookupOrInsert<V>(\n  obj: Dict<V>,\n  key: string | number,\n  valFn: () => V\n): V {\n  if (!contains(obj, key)) {\n    obj[key] = valFn();\n  }\n  return obj[key];\n}\n\nexport function isEmpty<V>(obj: Dict<V>) {\n  assert(\n    obj != null && typeof obj === 'object',\n    'isEmpty() expects object parameter.'\n  );\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function shallowCopy<V>(obj: Dict<V>): Dict<V> {\n  assert(\n    obj && typeof obj === 'object',\n    'shallowCopy() expects object parameter.'\n  );\n  const result: Dict<V> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n"]}