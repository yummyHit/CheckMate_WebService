{"version":3,"sources":["src/firestore/util/sorted_set.ts","firestore/util/sorted_set.js"],"names":["SortedSet","comparator","data","fromMapKeys","map","keys","forEach","key","add","prototype","has","elem","get","first","minKey","last","maxKey","Object","defineProperty","size","enumerable","configurable","indexOf","cb","inorderTraversal","k","v","forEachInRange","range","iter","getIteratorFrom","hasNext","getNext","forEachWhile","start","undefined","getIterator","result","firstAfterOrEqual","copy","remove","insert","delete","isEmpty","unionWith","other","equals","thisIt","otherIt","thisElem","otherElem","toString","push"],"mappings":";;;;;;;AAgBA;;AAEA;;;;;;;AAOA,IAAAA,YAAA,aAAA,YAAA;AAGE,aAAAA,SAAA,CAAoBC,UAApB,EAA6D;AAAzC,aAAAA,UAAA,GAAAA,UAAA;AAClB,aAAKC,IAAL,GAAY,0BAA0B,KAAKD,UAA/B,CAAZ;AACD;AAED;;;;AAIOD,cAAAG,WAAA,GAAP,UAAyBC,GAAzB,EAA6C;AAC3C,YAAIC,OAAO,IAAIL,SAAJ,CAAiBI,IAAIH,UAArB,CAAX;AACAG,YAAIE,OAAJ,CAAY,UAAAC,GAAA,EAAG;AACbF,mBAAOA,KAAKG,GAAL,CAASD,GAAT,CAAP;AACD,SAFD;AAGA,eAAOF,IAAP;AACD,KANM;AAQPL,cAAAS,SAAA,CAAAC,GAAA,GAAA,UAAIC,IAAJ,EAAW;AACT,eAAO,KAAKT,IAAL,CAAUU,GAAV,CAAcD,IAAd,MAAwB,IAA/B;AACD,KAFD;AAIAX,cAAAS,SAAA,CAAAI,KAAA,GAAA,YAAA;AACE,eAAO,KAAKX,IAAL,CAAUY,MAAV,EAAP;AACD,KAFD;AAIAd,cAAAS,SAAA,CAAAM,IAAA,GAAA,YAAA;AACE,eAAO,KAAKb,IAAL,CAAUc,MAAV,EAAP;AACD,KAFD;AAIAC,WAAAC,cAAA,CAAIlB,UAAAS,SAAJ,EAAI,MAAJ,EAAQ;ACPFG,aDON,eAAA;AACE,mBAAO,KAAKV,IAAL,CAAUiB,IAAjB;AACD,SAFO;ACJFC,oBAAY,IDIV;ACHFC,sBAAc;ADGZ,KAAR;AAIArB,cAAAS,SAAA,CAAAa,OAAA,GAAA,UAAQX,IAAR,EAAe;AACb,eAAO,KAAKT,IAAL,CAAUoB,OAAV,CAAkBX,IAAlB,CAAP;AACD,KAFD;AAIA;AACAX,cAAAS,SAAA,CAAAH,OAAA,GAAA,UAAQiB,EAAR,EAA6B;AAC3B,aAAKrB,IAAL,CAAUsB,gBAAV,CAA2B,UAACC,CAAD,EAAOC,CAAP,EAAiB;AAC1CH,eAAGE,CAAH;AACA,mBAAO,KAAP;AACD,SAHD;AAID,KALD;AAOA;AACAzB,cAAAS,SAAA,CAAAkB,cAAA,GAAA,UAAeC,KAAf,EAA8BL,EAA9B,EAAmD;AACjD,YAAMM,OAAO,KAAK3B,IAAL,CAAU4B,eAAV,CAA0BF,MAAM,CAAN,CAA1B,CAAb;AACA,eAAOC,KAAKE,OAAL,EAAP,EAAuB;AACrB,gBAAMpB,OAAOkB,KAAKG,OAAL,EAAb;AACA,gBAAI,KAAK/B,UAAL,CAAgBU,KAAKJ,GAArB,EAA0BqB,MAAM,CAAN,CAA1B,KAAuC,CAA3C,EAA8C;AAC9CL,eAAGZ,KAAKJ,GAAR;AACD;AACF,KAPD;AASA;;;AAGAP,cAAAS,SAAA,CAAAwB,YAAA,GAAA,UAAaV,EAAb,EAAuCW,KAAvC,EAAgD;AAC9C,YAAIL,IAAJ;AACA,YAAIK,UAAUC,SAAd,EAAyB;AACvBN,mBAAO,KAAK3B,IAAL,CAAU4B,eAAV,CAA0BI,KAA1B,CAAP;AACD,SAFD,MAEO;AACLL,mBAAO,KAAK3B,IAAL,CAAUkC,WAAV,EAAP;AACD;AACD,eAAOP,KAAKE,OAAL,EAAP,EAAuB;AACrB,gBAAMpB,OAAOkB,KAAKG,OAAL,EAAb;AACA,gBAAMK,SAASd,GAAGZ,KAAKJ,GAAR,CAAf;AACA,gBAAI,CAAC8B,MAAL,EAAa;AACd;AACF,KAZD;AAcA;AACArC,cAAAS,SAAA,CAAA6B,iBAAA,GAAA,UAAkB3B,IAAlB,EAAyB;AACvB,YAAMkB,OAAO,KAAK3B,IAAL,CAAU4B,eAAV,CAA0BnB,IAA1B,CAAb;AACA,eAAOkB,KAAKE,OAAL,KAAiBF,KAAKG,OAAL,GAAezB,GAAhC,GAAsC,IAA7C;AACD,KAHD;AAKA;AACAP,cAAAS,SAAA,CAAAD,GAAA,GAAA,UAAIG,IAAJ,EAAW;AACT,eAAO,KAAK4B,IAAL,CAAU,KAAKrC,IAAL,CAAUsC,MAAV,CAAiB7B,IAAjB,EAAuB8B,MAAvB,CAA8B9B,IAA9B,EAAoC,IAApC,CAAV,CAAP;AACD,KAFD;AAIA;AACAX,cAAAS,SAAA,CAAAiC,MAAA,GAAA,UAAO/B,IAAP,EAAc;AACZ,YAAI,CAAC,KAAKD,GAAL,CAASC,IAAT,CAAL,EAAqB,OAAO,IAAP;AACrB,eAAO,KAAK4B,IAAL,CAAU,KAAKrC,IAAL,CAAUsC,MAAV,CAAiB7B,IAAjB,CAAV,CAAP;AACD,KAHD;AAKAX,cAAAS,SAAA,CAAAkC,OAAA,GAAA,YAAA;AACE,eAAO,KAAKzC,IAAL,CAAUyC,OAAV,EAAP;AACD,KAFD;AAIA3C,cAAAS,SAAA,CAAAmC,SAAA,GAAA,UAAUC,KAAV,EAA6B;AAC3B,YAAIR,SAAuB,IAA3B;AACAQ,cAAMvC,OAAN,CAAc,UAAAK,IAAA,EAAI;AAChB0B,qBAASA,OAAO7B,GAAP,CAAWG,IAAX,CAAT;AACD,SAFD;AAGA,eAAO0B,MAAP;AACD,KAND;AAQArC,cAAAS,SAAA,CAAAqC,MAAA,GAAA,UAAOD,KAAP,EAA0B;AACxB,YAAI,EAAEA,iBAAiB7C,SAAnB,CAAJ,EAAmC,OAAO,KAAP;AACnC,YAAI,KAAKmB,IAAL,KAAc0B,MAAM1B,IAAxB,EAA8B,OAAO,KAAP;AAE9B,YAAM4B,SAAS,KAAK7C,IAAL,CAAUkC,WAAV,EAAf;AACA,YAAMY,UAAUH,MAAM3C,IAAN,CAAWkC,WAAX,EAAhB;AACA,eAAOW,OAAOhB,OAAP,EAAP,EAAyB;AACvB,gBAAMkB,WAAWF,OAAOf,OAAP,GAAiBzB,GAAlC;AACA,gBAAM2C,YAAYF,QAAQhB,OAAR,GAAkBzB,GAApC;AACA,gBAAI,KAAKN,UAAL,CAAgBgD,QAAhB,EAA0BC,SAA1B,MAAyC,CAA7C,EAAgD,OAAO,KAAP;AACjD;AACD,eAAO,IAAP;AACD,KAZD;AAcAlD,cAAAS,SAAA,CAAA0C,QAAA,GAAA,YAAA;AACE,YAAMd,SAAc,EAApB;AACA,aAAK/B,OAAL,CAAa,UAAAK,IAAA,EAAI;AAAI,mBAAA0B,OAAOe,IAAP,CAAYzC,IAAZ,CAAA;AAAiB,SAAtC;AACA,eAAO,eAAe0B,OAAOc,QAAP,EAAf,GAAmC,GAA1C;AACD,KAJD;AAMQnD,cAAAS,SAAA,CAAA8B,IAAA,GAAR,UAAarC,IAAb,EAAwC;AACtC,YAAMmC,SAAS,IAAIrC,SAAJ,CAAc,KAAKC,UAAnB,CAAf;AACAoC,eAAOnC,IAAP,GAAcA,IAAd;AACA,eAAOmC,MAAP;AACD,KAJO;AAKV,WAAArC,SAAA;AAhIA,CAAA,EAAA,C,CAzBA;;;;;;;;;;;;;;;QCiJSA,S,GAAAA,S","file":"sorted_set.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entry, SortedMap, SortedMapIterator } from './sorted_map';\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nexport class SortedSet<T> {\n  private data: SortedMap<T, boolean>;\n\n  constructor(private comparator: (left: T, right: T) => number) {\n    this.data = new SortedMap<T, boolean>(this.comparator);\n  }\n\n  /**\n   * Creates a SortedSet from the keys of the map.\n   * This is currently implemented as an O(n) copy.\n   */\n  static fromMapKeys<K, V>(map: SortedMap<K, V>): SortedSet<K> {\n    let keys = new SortedSet<K>(map.comparator);\n    map.forEach(key => {\n      keys = keys.add(key);\n    });\n    return keys;\n  }\n\n  has(elem: T): boolean {\n    return this.data.get(elem) !== null;\n  }\n\n  first(): T | null {\n    return this.data.minKey();\n  }\n\n  last(): T | null {\n    return this.data.maxKey();\n  }\n\n  get size(): number {\n    return this.data.size;\n  }\n\n  indexOf(elem: T): number {\n    return this.data.indexOf(elem);\n  }\n\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb: (elem: T) => void): void {\n    this.data.inorderTraversal((k: T, v: boolean) => {\n      cb(k);\n      return false;\n    });\n  }\n\n  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n  forEachInRange(range: [T, T], cb: (elem: T) => void): void {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) return;\n      cb(elem.key);\n    }\n  }\n\n  /**\n   * Iterates over `elem`s such that: start <= elem until false is returned.\n   */\n  forEachWhile(cb: (elem: T) => boolean, start?: T): void {\n    let iter: SortedMapIterator<T, boolean, Entry<T, boolean>>;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) return;\n    }\n  }\n\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem: T): T | null {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n\n  /** Inserts or updates an element */\n  add(elem: T): SortedSet<T> {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n\n  /** Deletes an element */\n  delete(elem: T): SortedSet<T> {\n    if (!this.has(elem)) return this;\n    return this.copy(this.data.remove(elem));\n  }\n\n  isEmpty(): boolean {\n    return this.data.isEmpty();\n  }\n\n  unionWith(other: SortedSet<T>): SortedSet<T> {\n    let result: SortedSet<T> = this;\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n\n  equals(other: SortedSet<T>): boolean {\n    if (!(other instanceof SortedSet)) return false;\n    if (this.size !== other.size) return false;\n\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    const result: T[] = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n\n  private copy(data: SortedMap<T, boolean>): SortedSet<T> {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SortedMap } from './sorted_map';\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nvar SortedSet = /** @class */ (function () {\n    function SortedSet(comparator) {\n        this.comparator = comparator;\n        this.data = new SortedMap(this.comparator);\n    }\n    /**\n     * Creates a SortedSet from the keys of the map.\n     * This is currently implemented as an O(n) copy.\n     */\n    SortedSet.fromMapKeys = function (map) {\n        var keys = new SortedSet(map.comparator);\n        map.forEach(function (key) {\n            keys = keys.add(key);\n        });\n        return keys;\n    };\n    SortedSet.prototype.has = function (elem) {\n        return this.data.get(elem) !== null;\n    };\n    SortedSet.prototype.first = function () {\n        return this.data.minKey();\n    };\n    SortedSet.prototype.last = function () {\n        return this.data.maxKey();\n    };\n    Object.defineProperty(SortedSet.prototype, \"size\", {\n        get: function () {\n            return this.data.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SortedSet.prototype.indexOf = function (elem) {\n        return this.data.indexOf(elem);\n    };\n    /** Iterates elements in order defined by \"comparator\" */\n    SortedSet.prototype.forEach = function (cb) {\n        this.data.inorderTraversal(function (k, v) {\n            cb(k);\n            return false;\n        });\n    };\n    /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */\n    SortedSet.prototype.forEachInRange = function (range, cb) {\n        var iter = this.data.getIteratorFrom(range[0]);\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            if (this.comparator(elem.key, range[1]) >= 0)\n                return;\n            cb(elem.key);\n        }\n    };\n    /**\n     * Iterates over `elem`s such that: start <= elem until false is returned.\n     */\n    SortedSet.prototype.forEachWhile = function (cb, start) {\n        var iter;\n        if (start !== undefined) {\n            iter = this.data.getIteratorFrom(start);\n        }\n        else {\n            iter = this.data.getIterator();\n        }\n        while (iter.hasNext()) {\n            var elem = iter.getNext();\n            var result = cb(elem.key);\n            if (!result)\n                return;\n        }\n    };\n    /** Finds the least element greater than or equal to `elem`. */\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\n        var iter = this.data.getIteratorFrom(elem);\n        return iter.hasNext() ? iter.getNext().key : null;\n    };\n    /** Inserts or updates an element */\n    SortedSet.prototype.add = function (elem) {\n        return this.copy(this.data.remove(elem).insert(elem, true));\n    };\n    /** Deletes an element */\n    SortedSet.prototype.delete = function (elem) {\n        if (!this.has(elem))\n            return this;\n        return this.copy(this.data.remove(elem));\n    };\n    SortedSet.prototype.isEmpty = function () {\n        return this.data.isEmpty();\n    };\n    SortedSet.prototype.unionWith = function (other) {\n        var result = this;\n        other.forEach(function (elem) {\n            result = result.add(elem);\n        });\n        return result;\n    };\n    SortedSet.prototype.equals = function (other) {\n        if (!(other instanceof SortedSet))\n            return false;\n        if (this.size !== other.size)\n            return false;\n        var thisIt = this.data.getIterator();\n        var otherIt = other.data.getIterator();\n        while (thisIt.hasNext()) {\n            var thisElem = thisIt.getNext().key;\n            var otherElem = otherIt.getNext().key;\n            if (this.comparator(thisElem, otherElem) !== 0)\n                return false;\n        }\n        return true;\n    };\n    SortedSet.prototype.toString = function () {\n        var result = [];\n        this.forEach(function (elem) { return result.push(elem); });\n        return 'SortedSet(' + result.toString() + ')';\n    };\n    SortedSet.prototype.copy = function (data) {\n        var result = new SortedSet(this.comparator);\n        result.data = data;\n        return result;\n    };\n    return SortedSet;\n}());\nexport { SortedSet };\n\n\n"]}