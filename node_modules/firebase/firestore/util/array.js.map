{"version":3,"sources":["src/firestore/util/array.ts"],"names":["includes","some","forEachType","findIndex","array","value","i","length","predicate","type","fn","thisArg","forEach","call"],"mappings":";;;;;QAmBMA,Q,GAAAA,Q;QAUAC,I,GAAAA,I;QAWAC,W,GAAAA,W;QAkBAC,S,GAAAA,S;AA1DN;;;;;;;;;;;;;;;AAgBA;;;AAGM,SAAAH,QAAA,CAAsBI,KAAtB,EAAkCC,KAAlC,EAA0C;AAC9C,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,YAAIF,MAAME,CAAN,MAAaD,KAAjB,EAAwB,OAAO,IAAP;AACzB;AACD,WAAO,KAAP;AACD;AAED;;;AAGM,SAAAJ,IAAA,CAAkBG,KAAlB,EAA8BI,SAA9B,EAA0D;AAC9D,SAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,YAAIE,UAAUJ,MAAME,CAAN,CAAV,CAAJ,EAAyB,OAAO,IAAP;AAC1B;AACD,WAAO,KAAP;AACD;AAED;;;;AAIM,SAAAJ,WAAA,CACJE,KADI,EAEJK,IAFI,EAGJC,EAHI,EAIJC,OAJI,EAIQ;AAEZP,UAAMQ,OAAN,CAAc,UAAAP,KAAA,EAAK;AACjB,YAAIA,iBAAiBI,IAArB,EAA2B;AACzBC,eAAGG,IAAH,CAAQF,OAAR,EAAiBN,KAAjB;AACD;AACF,KAJD;AAKD;AAED;;;;;AAKM,SAAAF,SAAA,CACJC,KADI,EAEJI,SAFI,EAE4B;AAEhC,SAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,YAAIE,UAAUJ,MAAME,CAAN,CAAV,CAAJ,EAAyB;AACvB,mBAAOA,CAAP;AACD;AACF;AACD,WAAO,IAAP;AACD","file":"array.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true iff the array contains the value using strong equality.\n */\nexport function includes<T>(array: T[], value: T): boolean {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === value) return true;\n  }\n  return false;\n}\n\n/**\n * Returns true iff the array contains any value mathching the predicate\n */\nexport function some<T>(array: T[], predicate: (t: T) => boolean): boolean {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) return true;\n  }\n  return false;\n}\n\n/**\n * Calls a fn for each element in an array that is an instance of a provided\n * class/function.\n */\nexport function forEachType<A, B>(\n  array: A[],\n  type: Function,\n  fn: (value: B) => void,\n  thisArg?: {}\n): void {\n  array.forEach(value => {\n    if (value instanceof type) {\n      fn.call(thisArg, value);\n    }\n  });\n}\n\n/**\n * Calls predicate function for each item in the array until the predicate\n * returns true, at which point the index of that item is returned.  If the\n * predicate does not return true for any item, null is returned.\n */\nexport function findIndex<A>(\n  array: A[],\n  predicate: (value: A) => boolean\n): number | null {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return i;\n    }\n  }\n  return null;\n}\n"]}