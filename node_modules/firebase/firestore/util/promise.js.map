{"version":3,"sources":["src/firestore/util/promise.ts","firestore/util/promise.js"],"names":["sequence","Deferred","_this","promise","resolve","reject","values","fn","initialValue","result","forEach","value","then","lastResult"],"mappings":";;;;;;QAiDMA,Q,GAAAA,Q;;AAjCN;;AAaA,IAAAC,WAAA,aAAA,YAAA;AAKE,aAAAA,QAAA,GAAA;AAAA,YAAAC,QAAA,IAAA;AACE,aAAKC,OAAL,GAAe,yBAAY,UAACC,OAAD,EAAuBC,MAAvB,EAAuC;AAChEH,kBAAKE,OAAL,GAAeA,OAAf;AACAF,kBAAKG,MAAL,GAAcA,MAAd;AACD,SAHc,CAAf;AAID;AACH,WAAAJ,QAAA;AAXA,CAAA,EAAA,C,CA7BA;;;;;;;;;;;;;;;QC0BSA,Q,GAAAA,Q;ADgBT;;;;;;;;AAOM,SAAAD,QAAA,CACJM,MADI,EAEJC,EAFI,EAGJC,YAHI,EAGY;AAEhB,QAAIC,SAAS,qBAAQL,OAAR,CAAgBI,YAAhB,CAAb;AACAF,WAAOI,OAAP,CAAe,UAAAC,KAAA,EAAK;AAClBF,iBAASA,OAAOG,IAAP,CAAY,UAAAC,UAAA,EAAU;AAAI,mBAAAN,GAAGI,KAAH,EAAUE,UAAV,CAAA;AAAqB,SAA/C,CAAT;AACD,KAFD;AAGA,WAAOJ,MAAP;AACD","file":"promise.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PromiseImpl as Promise } from '../../utils/promise';\n\nimport { AnyDuringMigration } from './misc';\n\nexport interface Resolver<R> {\n  (value?: R | Promise<R>): void;\n}\n\n// tslint:disable-next-line:no-any\nexport interface Rejecter {\n  (value?: any): void;\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: Resolver<R>;\n  reject: Rejecter;\n\n  constructor() {\n    this.promise = new Promise((resolve: Resolver<R>, reject: Rejecter) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence<T, R>(\n  values: T[],\n  fn: (value: T, result?: R) => R | Promise<R>,\n  initialValue?: R\n): Promise<R> {\n  let result = Promise.resolve(initialValue);\n  values.forEach(value => {\n    result = result.then(lastResult => fn(value, lastResult));\n  });\n  return result as AnyDuringMigration;\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PromiseImpl as Promise } from '../../utils/promise';\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    return Deferred;\n}());\nexport { Deferred };\n/**\n * Takes an array of values and sequences them using the promise (or value)\n * returned by the supplied callback. The callback for each item is called\n * after the promise is resolved for the previous item.\n * The function returns a promise which is resolved after the promise for\n * the last item is resolved.\n */\nexport function sequence(values, fn, initialValue) {\n    var result = Promise.resolve(initialValue);\n    values.forEach(function (value) {\n        result = result.then(function (lastResult) { return fn(value, lastResult); });\n    });\n    return result;\n}\n\n\n"]}