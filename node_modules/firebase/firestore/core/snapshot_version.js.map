{"version":3,"sources":["src/firestore/core/snapshot_version.ts"],"names":["SnapshotVersion","timestamp","fromMicroseconds","value","seconds","Math","floor","nanos","fromTimestamp","forDeletedDoc","MIN","prototype","compareTo","other","equals","toMicroseconds","toString","toTimestamp"],"mappings":";;;;;;;AAgBA;;AAEA;;;;AAIA,IAAAA,kBAAA,aAAA,YAAA;AAmBE,aAAAA,eAAA,CAA4BC,SAA5B,EAAgD;AAApB,aAAAA,SAAA,GAAAA,SAAA;AAAwB;AAhBpD;AACA;AACOD,oBAAAE,gBAAA,GAAP,UAAwBC,KAAxB,EAAqC;AACnC,YAAMC,UAAUC,KAAKC,KAAL,CAAWH,QAAQ,GAAnB,CAAhB;AACA,YAAMI,QAASJ,QAAQ,GAAT,GAAgB,GAA9B;AACA,eAAO,IAAIH,eAAJ,CAAoB,yBAAcI,OAAd,EAAuBG,KAAvB,CAApB,CAAP;AACD,KAJM;AAMAP,oBAAAQ,aAAA,GAAP,UAAqBL,KAArB,EAAqC;AACnC,eAAO,IAAIH,eAAJ,CAAoBG,KAApB,CAAP;AACD,KAFM;AAIAH,oBAAAS,aAAA,GAAP,YAAA;AACE,eAAOT,gBAAgBU,GAAvB;AACD,KAFM;AAMPV,oBAAAW,SAAA,CAAAC,SAAA,GAAA,UAAUC,KAAV,EAAgC;AAC9B,eAAO,KAAKZ,SAAL,CAAeW,SAAf,CAAyBC,MAAMZ,SAA/B,CAAP;AACD,KAFD;AAIAD,oBAAAW,SAAA,CAAAG,MAAA,GAAA,UAAOD,KAAP,EAA6B;AAC3B,eAAO,KAAKZ,SAAL,CAAea,MAAf,CAAsBD,MAAMZ,SAA5B,CAAP;AACD,KAFD;AAIA;AACAD,oBAAAW,SAAA,CAAAI,cAAA,GAAA,YAAA;AACE;AACA,eAAO,KAAKd,SAAL,CAAeG,OAAf,GAAyB,GAAzB,GAA+B,KAAKH,SAAL,CAAeM,KAAf,GAAuB,IAA7D;AACD,KAHD;AAKAP,oBAAAW,SAAA,CAAAK,QAAA,GAAA,YAAA;AACE,eAAO,qBAAqB,KAAKf,SAAL,CAAee,QAAf,EAArB,GAAiD,GAAxD;AACD,KAFD;AAIAhB,oBAAAW,SAAA,CAAAM,WAAA,GAAA,YAAA;AACE,eAAO,KAAKhB,SAAZ;AACD,KAFD;AAtCgBD,oBAAAU,GAAA,GAAM,IAAIV,eAAJ,CAAoB,yBAAc,CAAd,EAAiB,CAAjB,CAApB,CAAN;AAyClB,WAAAA,eAAA;AA1CA,CAAA,EAAA,C,CAtBA;;;;;;;;;;;;;;;QAsBaA,e,GAAAA,e","file":"snapshot_version.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timestamp } from './timestamp';\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nexport class SnapshotVersion {\n  static readonly MIN = new SnapshotVersion(new Timestamp(0, 0));\n\n  // TODO(b/34176344): Once we no longer need to use the old alpha protos,\n  // delete this constructor and use a timestamp-backed version everywhere.\n  static fromMicroseconds(value: number): SnapshotVersion {\n    const seconds = Math.floor(value / 1e6);\n    const nanos = (value % 1e6) * 1e3;\n    return new SnapshotVersion(new Timestamp(seconds, nanos));\n  }\n\n  static fromTimestamp(value: Timestamp): SnapshotVersion {\n    return new SnapshotVersion(value);\n  }\n\n  static forDeletedDoc(): SnapshotVersion {\n    return SnapshotVersion.MIN;\n  }\n\n  private constructor(private timestamp: Timestamp) {}\n\n  compareTo(other: SnapshotVersion): number {\n    return this.timestamp.compareTo(other.timestamp);\n  }\n\n  equals(other: SnapshotVersion): boolean {\n    return this.timestamp.equals(other.timestamp);\n  }\n\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds(): number {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanos / 1000;\n  }\n\n  toString(): string {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n\n  toTimestamp(): Timestamp {\n    return this.timestamp;\n  }\n}\n"]}