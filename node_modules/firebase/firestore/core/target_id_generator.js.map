{"version":3,"sources":["src/firestore/core/target_id_generator.ts","firestore/core/target_id_generator.js"],"names":["RESERVED_BITS","GeneratorIds","TargetIdGenerator","generatorId","initAfter","afterWithoutGenerator","afterGenerator","previousId","prototype","next","forLocalStore","LocalStore","forSyncEngine","SyncEngine"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAkBA,IAAMA,gBAAgB,CAAtB;AAEA,IAAKC,YAAL;AAAA,CAAA,UAAKA,YAAL,EAAiB;AACfA,iBAAAA,aAAA,YAAA,IAAA,CAAA,IAAA,YAAA;AACAA,iBAAAA,aAAA,YAAA,IAAA,CAAA,IAAA,YAAA;AACD,CAHD,EAAKA,iBAAAA,eAAY,EAAZ,CAAL;AAKA;;;;;;;AAOA,IAAAC,oBAAA,aAAA,YAAA;AAGE,aAAAA,iBAAA,CAAoBC,WAApB,EAAyCC,SAAzC,EAAgE;AAAvB,YAAAA,cAAA,KAAA,CAAA,EAAA;AAAAA,wBAAA,CAAA;AAAuB;AAA5C,aAAAD,WAAA,GAAAA,WAAA;AAClB;AACA,YAAME,wBAAyBD,aAAaJ,aAAd,IAAgCA,aAA9D;AACA,YAAMM,iBAAiBF,YAAYC,qBAAnC;AACA,YAAIC,kBAAkBH,WAAtB,EAAmC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAKI,UAAL,GAAkBF,wBAAwB,KAAKF,WAA/C;AACD,SATD,MASO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAKI,UAAL,GACE,CAACF,wBAAwB,KAAKF,WAA9B,KAA8C,KAAKH,aAAnD,CADF;AAED;AACF;AAEDE,sBAAAM,SAAA,CAAAC,IAAA,GAAA,YAAA;AACE,aAAKF,UAAL,IAAmB,KAAKP,aAAxB;AACA,eAAO,KAAKO,UAAZ;AACD,KAHD;AAKOL,sBAAAQ,aAAA,GAAP,UAAqBN,SAArB,EAA4C;AAAvB,YAAAA,cAAA,KAAA,CAAA,EAAA;AAAAA,wBAAA,CAAA;AAAuB;AAC1C,eAAO,IAAIF,iBAAJ,CAAsBD,aAAaU,UAAnC,EAA+CP,SAA/C,CAAP;AACD,KAFM;AAIAF,sBAAAU,aAAA,GAAP,YAAA;AACE,eAAO,IAAIV,iBAAJ,CAAsBD,aAAaY,UAAnC,CAAP;AACD,KAFM;AAGT,WAAAX,iBAAA;AAzCA,CAAA,EAAA;QCsCSA,iB,GAAAA,iB","file":"target_id_generator.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TargetId } from './types';\n\nconst RESERVED_BITS = 1;\n\nenum GeneratorIds {\n  LocalStore = 0,\n  SyncEngine = 1\n}\n\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nexport class TargetIdGenerator {\n  private previousId: TargetId;\n\n  constructor(private generatorId: number, initAfter: TargetId = 0) {\n    // Replace the generator part of initAfter with this generator's ID.\n    const afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n    const afterGenerator = initAfter - afterWithoutGenerator;\n    if (afterGenerator >= generatorId) {\n      // For example, if:\n      //   this.generatorId = 0b0000\n      //   after = 0b1011\n      //   afterGenerator = 0b0001\n      // Then:\n      //   previous = 0b1010\n      //   next = 0b1100\n      this.previousId = afterWithoutGenerator | this.generatorId;\n    } else {\n      // For example, if:\n      //   this.generatorId = 0b0001\n      //   after = 0b1010\n      //   afterGenerator = 0b0000\n      // Then:\n      //   previous = 0b1001\n      //   next = 0b1011\n      this.previousId =\n        (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n    }\n  }\n\n  next(): TargetId {\n    this.previousId += 1 << RESERVED_BITS;\n    return this.previousId;\n  }\n\n  static forLocalStore(initAfter: TargetId = 0): TargetIdGenerator {\n    return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n  }\n\n  static forSyncEngine(): TargetIdGenerator {\n    return new TargetIdGenerator(GeneratorIds.SyncEngine);\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar RESERVED_BITS = 1;\nvar GeneratorIds;\n(function (GeneratorIds) {\n    GeneratorIds[GeneratorIds[\"LocalStore\"] = 0] = \"LocalStore\";\n    GeneratorIds[GeneratorIds[\"SyncEngine\"] = 1] = \"SyncEngine\";\n})(GeneratorIds || (GeneratorIds = {}));\n/**\n * TargetIdGenerator generates monotonically increasing integer IDs. There are\n * separate generators for different scopes. While these generators will operate\n * independently of each other, they are scoped, such that no two generators\n * will ever produce the same ID. This is useful, because sometimes the backend\n * may group IDs from separate parts of the client into the same ID space.\n */\nvar TargetIdGenerator = /** @class */ (function () {\n    function TargetIdGenerator(generatorId, initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        this.generatorId = generatorId;\n        // Replace the generator part of initAfter with this generator's ID.\n        var afterWithoutGenerator = (initAfter >> RESERVED_BITS) << RESERVED_BITS;\n        var afterGenerator = initAfter - afterWithoutGenerator;\n        if (afterGenerator >= generatorId) {\n            // For example, if:\n            //   this.generatorId = 0b0000\n            //   after = 0b1011\n            //   afterGenerator = 0b0001\n            // Then:\n            //   previous = 0b1010\n            //   next = 0b1100\n            this.previousId = afterWithoutGenerator | this.generatorId;\n        }\n        else {\n            // For example, if:\n            //   this.generatorId = 0b0001\n            //   after = 0b1010\n            //   afterGenerator = 0b0000\n            // Then:\n            //   previous = 0b1001\n            //   next = 0b1011\n            this.previousId =\n                (afterWithoutGenerator | this.generatorId) - (1 << RESERVED_BITS);\n        }\n    }\n    TargetIdGenerator.prototype.next = function () {\n        this.previousId += 1 << RESERVED_BITS;\n        return this.previousId;\n    };\n    TargetIdGenerator.forLocalStore = function (initAfter) {\n        if (initAfter === void 0) { initAfter = 0; }\n        return new TargetIdGenerator(GeneratorIds.LocalStore, initAfter);\n    };\n    TargetIdGenerator.forSyncEngine = function () {\n        return new TargetIdGenerator(GeneratorIds.SyncEngine);\n    };\n    return TargetIdGenerator;\n}());\nexport { TargetIdGenerator };\n\n\n"]}