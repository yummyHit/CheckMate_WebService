{"version":3,"sources":["src/firestore/core/view_snapshot.ts","firestore/core/view_snapshot.js"],"names":["ChangeType","SyncState","DocumentChangeSet","changeMap","comparator","prototype","track","change","key","doc","oldChange","get","insert","type","Added","Metadata","Removed","Modified","remove","JSON","stringify","getChanges","changes","inorderTraversal","push"],"mappings":"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","file":"view_snapshot.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Document } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { DocumentSet } from '../model/document_set';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\n\nimport { Query } from './query';\n\nexport enum ChangeType {\n  Added,\n  Removed,\n  Modified,\n  Metadata\n}\n\nexport interface DocumentViewChange {\n  type: ChangeType;\n  doc: Document;\n}\n\nexport enum SyncState {\n  Local,\n  Synced\n}\n\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nexport class DocumentChangeSet {\n  private changeMap = new SortedMap<DocumentKey, DocumentViewChange>(\n    DocumentKey.comparator\n  );\n\n  constructor() {}\n\n  track(change: DocumentViewChange) {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n\n    // Merge the new change with the existing change.\n    if (\n      change.type !== ChangeType.Added &&\n      oldChange.type === ChangeType.Metadata\n    ) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (\n      change.type === ChangeType.Metadata &&\n      oldChange.type !== ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Modified &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Added,\n        doc: change.doc\n      });\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Added\n    ) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (\n      change.type === ChangeType.Removed &&\n      oldChange.type === ChangeType.Modified\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Removed,\n        doc: oldChange.doc\n      });\n    } else if (\n      change.type === ChangeType.Added &&\n      oldChange.type === ChangeType.Removed\n    ) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: ChangeType.Modified,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail(\n        'unsupported combination of changes: ' +\n          JSON.stringify(change) +\n          ' after ' +\n          JSON.stringify(oldChange)\n      );\n    }\n  }\n\n  getChanges(): DocumentViewChange[] {\n    const changes: DocumentViewChange[] = [];\n    this.changeMap.inorderTraversal(\n      (key: DocumentKey, change: DocumentViewChange) => {\n        changes.push(change);\n      }\n    );\n    return changes;\n  }\n}\n\nexport interface ViewSnapshot {\n  readonly query: Query;\n  readonly docs: DocumentSet;\n  readonly oldDocs: DocumentSet;\n  readonly docChanges: DocumentViewChange[];\n  readonly fromCache: boolean;\n  readonly hasPendingWrites: boolean;\n  readonly syncStateChanged: boolean;\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\nimport { SortedMap } from '../util/sorted_map';\nexport var ChangeType;\n(function (ChangeType) {\n    ChangeType[ChangeType[\"Added\"] = 0] = \"Added\";\n    ChangeType[ChangeType[\"Removed\"] = 1] = \"Removed\";\n    ChangeType[ChangeType[\"Modified\"] = 2] = \"Modified\";\n    ChangeType[ChangeType[\"Metadata\"] = 3] = \"Metadata\";\n})(ChangeType || (ChangeType = {}));\nexport var SyncState;\n(function (SyncState) {\n    SyncState[SyncState[\"Local\"] = 0] = \"Local\";\n    SyncState[SyncState[\"Synced\"] = 1] = \"Synced\";\n})(SyncState || (SyncState = {}));\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nvar DocumentChangeSet = /** @class */ (function () {\n    function DocumentChangeSet() {\n        this.changeMap = new SortedMap(DocumentKey.comparator);\n    }\n    DocumentChangeSet.prototype.track = function (change) {\n        var key = change.doc.key;\n        var oldChange = this.changeMap.get(key);\n        if (!oldChange) {\n            this.changeMap = this.changeMap.insert(key, change);\n            return;\n        }\n        // Merge the new change with the existing change.\n        if (change.type !== ChangeType.Added &&\n            oldChange.type === ChangeType.Metadata) {\n            this.changeMap = this.changeMap.insert(key, change);\n        }\n        else if (change.type === ChangeType.Metadata &&\n            oldChange.type !== ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: oldChange.type,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Modified &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Added,\n                doc: change.doc\n            });\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Added) {\n            this.changeMap = this.changeMap.remove(key);\n        }\n        else if (change.type === ChangeType.Removed &&\n            oldChange.type === ChangeType.Modified) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Removed,\n                doc: oldChange.doc\n            });\n        }\n        else if (change.type === ChangeType.Added &&\n            oldChange.type === ChangeType.Removed) {\n            this.changeMap = this.changeMap.insert(key, {\n                type: ChangeType.Modified,\n                doc: change.doc\n            });\n        }\n        else {\n            // This includes these cases, which don't make sense:\n            // Added->Added\n            // Removed->Removed\n            // Modified->Added\n            // Removed->Modified\n            // Metadata->Added\n            // Removed->Metadata\n            fail('unsupported combination of changes: ' +\n                JSON.stringify(change) +\n                ' after ' +\n                JSON.stringify(oldChange));\n        }\n    };\n    DocumentChangeSet.prototype.getChanges = function () {\n        var changes = [];\n        this.changeMap.inorderTraversal(function (key, change) {\n            changes.push(change);\n        });\n        return changes;\n    };\n    return DocumentChangeSet;\n}());\nexport { DocumentChangeSet };\n\n\n"]}