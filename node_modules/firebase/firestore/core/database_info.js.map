{"version":3,"sources":["src/firestore/core/database_info.ts","firestore/core/database_info.js"],"names":["DatabaseInfo","databaseId","persistenceKey","host","ssl","DEFAULT_DATABASE_NAME","DatabaseId","projectId","database","Object","defineProperty","prototype","get","enumerable","configurable","equals","other","compareTo"],"mappings":";;;;;;;AAgBA;;AAEA,IAAAA,eAAA,aAAA,YAAA;AACE;;;;;;;;;;AAUA,aAAAA,YAAA,CACWC,UADX,EAEWC,cAFX,EAGWC,IAHX,EAIWC,GAJX,EAIuB;AAHZ,aAAAH,UAAA,GAAAA,UAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAC,GAAA,GAAAA,GAAA;AACP;AACN,WAAAJ,YAAA;AAjBA,CAAA,EAAA,C,CAlBA;;;;;;;;;;;;;;;QCmCSA,Y,GAAAA,Y;ADET;;AACA,IAAMK,wBAAwB,WAA9B;AAEA;AACA,IAAAC,aAAA,aAAA,YAAA;AAEE,aAAAA,UAAA,CAAqBC,SAArB,EAAwCC,QAAxC,EAAyD;AAApC,aAAAD,SAAA,GAAAA,SAAA;AACnB,aAAKC,QAAL,GAAgBA,WAAWA,QAAX,GAAsBH,qBAAtC;AACD;AAEDI,WAAAC,cAAA,CAAIJ,WAAAK,SAAJ,EAAI,mBAAJ,EAAqB;ACFfC,aDEN,eAAA;AACE,mBAAO,KAAKJ,QAAL,KAAkBH,qBAAzB;AACD,SAFoB;ACCfQ,oBAAY,IDDG;ACEfC,sBAAc;ADFC,KAArB;AAIAR,eAAAK,SAAA,CAAAI,MAAA,GAAA,UAAOC,KAAP,EAAgB;AACd,eACEA,iBAAiBV,UAAjB,IACAU,MAAMT,SAAN,KAAoB,KAAKA,SADzB,IAEAS,MAAMR,QAAN,KAAmB,KAAKA,QAH1B;AAKD,KAND;AAQAF,eAAAK,SAAA,CAAAM,SAAA,GAAA,UAAUD,KAAV,EAA2B;AACzB,eACE,+BAAoB,KAAKT,SAAzB,EAAoCS,MAAMT,SAA1C,KACA,+BAAoB,KAAKC,QAAzB,EAAmCQ,MAAMR,QAAzC,CAFF;AAID,KALD;AAMF,WAAAF,UAAA;AAxBA,CAAA,EAAA;QCqBSA,U,GAAAA,U","file":"database_info.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { primitiveComparator } from '../util/misc';\n\nexport class DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId The database to use.\n   * @param persistenceKey A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host The Firestore backend host to connect to.\n   * @param ssl Whether to use SSL when connecting.\n   */\n  constructor(\n    readonly databaseId: DatabaseId,\n    readonly persistenceKey: string,\n    readonly host: string,\n    readonly ssl: boolean\n  ) {}\n}\n\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n\n/** Represents the database ID a Firestore client is associated with. */\nexport class DatabaseId {\n  readonly database: string;\n  constructor(readonly projectId: string, database?: string) {\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  get isDefaultDatabase(): boolean {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n\n  equals(other: {}): boolean {\n    return (\n      other instanceof DatabaseId &&\n      other.projectId === this.projectId &&\n      other.database === this.database\n    );\n  }\n\n  compareTo(other: DatabaseId): number {\n    return (\n      primitiveComparator(this.projectId, other.projectId) ||\n      primitiveComparator(this.database, other.database)\n    );\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { primitiveComparator } from '../util/misc';\nvar DatabaseInfo = /** @class */ (function () {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId The database to use.\n     * @param persistenceKey A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host The Firestore backend host to connect to.\n     * @param ssl Whether to use SSL when connecting.\n     */\n    function DatabaseInfo(databaseId, persistenceKey, host, ssl) {\n        this.databaseId = databaseId;\n        this.persistenceKey = persistenceKey;\n        this.host = host;\n        this.ssl = ssl;\n    }\n    return DatabaseInfo;\n}());\nexport { DatabaseInfo };\n/** The default database name for a project. */\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\nvar DatabaseId = /** @class */ (function () {\n    function DatabaseId(projectId, database) {\n        this.projectId = projectId;\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\n    }\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n        get: function () {\n            return this.database === DEFAULT_DATABASE_NAME;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DatabaseId.prototype.equals = function (other) {\n        return (other instanceof DatabaseId &&\n            other.projectId === this.projectId &&\n            other.database === this.database);\n    };\n    DatabaseId.prototype.compareTo = function (other) {\n        return (primitiveComparator(this.projectId, other.projectId) ||\n            primitiveComparator(this.database, other.database));\n    };\n    return DatabaseId;\n}());\nexport { DatabaseId };\n\n\n"]}