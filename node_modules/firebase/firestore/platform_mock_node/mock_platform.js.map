{"version":3,"sources":["src/firestore/platform_mock_node/mock_platform.ts","firestore/platform_mock_node/mock_platform.js"],"names":["MockPlatform","base64Available","emptyByteString","Uint8Array","prototype","loadConnection","databaseInfo","newSerializer","databaseId","useProto3Json","atob","encoded","test","INVALID_ARGUMENT","Buffer","toString","btoa","raw"],"mappings":";;;;;;;AAmBA;;AACA;;AACA;;AAEA,IAAAA,eAAA,aAAA,YAAA;AAAA,aAAAA,YAAA,GAAA;AACE;;AAGS,aAAAC,eAAA,GAAkB,IAAlB;AAEA,aAAAC,eAAA,GAAkB,IAAIC,UAAJ,CAAe,CAAf,CAAlB;AAwBV;AAtBCH,iBAAAI,SAAA,CAAAC,cAAA,GAAA,UAAeC,YAAf,EAAyC;AACvC,eAAO,kBAAK,+CAAL,CAAP;AACD,KAFD;AAGAN,iBAAAI,SAAA,CAAAG,aAAA,GAAA,UAAcC,UAAd,EAAoC;AAClC,eAAO,oCAAwBA,UAAxB,EAAoC,EAAEC,eAAe,KAAjB,EAApC,CAAP;AACD,KAFD;AAIAT,iBAAAI,SAAA,CAAAM,IAAA,GAAA,UAAKC,OAAL,EAAoB;AAClB;AACA;AACA,YAAI,mBAAmBC,IAAnB,CAAwBD,OAAxB,CAAJ,EAAsC;AACpC,kBAAM,0BACJ,YAAKE,gBADD,EAEJ,gCAAgCF,OAF5B,CAAN;AAID;AACD,eAAO,IAAIG,MAAJ,CAAWH,OAAX,EAAoB,QAApB,EAA8BI,QAA9B,CAAuC,QAAvC,CAAP;AACD,KAVD;AAYAf,iBAAAI,SAAA,CAAAY,IAAA,GAAA,UAAKC,GAAL,EAAgB;AACd,eAAO,IAAIH,MAAJ,CAAWG,GAAX,EAAgB,QAAhB,EAA0BF,QAA1B,CAAmC,QAAnC,CAAP;AACD,KAFD;AAGF,WAAAf,YAAA;AA9BA,CAAA,EAAA,C,CAvBA;;;;;;;;;;;;;;;QC4CSA,Y,GAAAA,Y","file":"mock_platform.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DatabaseId, DatabaseInfo } from '../core/database_info';\nimport { Platform } from '../platform/platform';\nimport { Connection } from '../remote/connection';\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\n\nexport class MockPlatform implements Platform {\n  /** A \"mock\" platform for use in NodeJS unit tests since we can't depend on\n   * gRPC. */\n\n  readonly base64Available = true;\n\n  readonly emptyByteString = new Uint8Array(0);\n\n  loadConnection(databaseInfo: DatabaseInfo): Promise<Connection> {\n    return fail('loadConnection() not supported in unit tests.');\n  }\n  newSerializer(databaseId: DatabaseId): JsonProtoSerializer {\n    return new JsonProtoSerializer(databaseId, { useProto3Json: false });\n  }\n\n  atob(encoded: string): string {\n    // Node actually doesn't validate base64 strings.\n    // A quick sanity check that is not a fool-proof validation\n    if (/[^-A-Za-z0-9+/=]/.test(encoded)) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Not a valid Base64 string: ' + encoded\n      );\n    }\n    return new Buffer(encoded, 'base64').toString('binary');\n  }\n\n  btoa(raw: string): string {\n    return new Buffer(raw, 'binary').toString('base64');\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonProtoSerializer } from '../remote/serializer';\nimport { fail } from '../util/assert';\nimport { Code, FirestoreError } from '../util/error';\nvar MockPlatform = /** @class */ (function () {\n    function MockPlatform() {\n        /** A \"mock\" platform for use in NodeJS unit tests since we can't depend on\n         * gRPC. */\n        this.base64Available = true;\n        this.emptyByteString = new Uint8Array(0);\n    }\n    MockPlatform.prototype.loadConnection = function (databaseInfo) {\n        return fail('loadConnection() not supported in unit tests.');\n    };\n    MockPlatform.prototype.newSerializer = function (databaseId) {\n        return new JsonProtoSerializer(databaseId, { useProto3Json: false });\n    };\n    MockPlatform.prototype.atob = function (encoded) {\n        // Node actually doesn't validate base64 strings.\n        // A quick sanity check that is not a fool-proof validation\n        if (/[^-A-Za-z0-9+/=]/.test(encoded)) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Not a valid Base64 string: ' + encoded);\n        }\n        return new Buffer(encoded, 'base64').toString('binary');\n    };\n    MockPlatform.prototype.btoa = function (raw) {\n        return new Buffer(raw, 'binary').toString('base64');\n    };\n    return MockPlatform;\n}());\nexport { MockPlatform };\n\n\n"]}