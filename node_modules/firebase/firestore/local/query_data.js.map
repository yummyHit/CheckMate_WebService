{"version":3,"sources":["src/firestore/local/query_data.ts","firestore/local/query_data.js"],"names":["QueryPurpose","QueryData","query","targetId","purpose","snapshotVersion","resumeToken","MIN","prototype","update","updated","equals","other"],"mappings":";;;;;;;AAiBA;;AAEA;;AAEA;AArBA;;;;;;;;;;;;;;;AAsBA,IAAYA,+CAAZ;AAAA,CAAA,UAAYA,YAAZ,EAAwB;AACtB;AACAA,eAAAA,aAAA,QAAA,IAAA,CAAA,IAAA,QAAA;AAEA;;;AAGAA,eAAAA,aAAA,yBAAA,IAAA,CAAA,IAAA,yBAAA;AAEA;AACAA,eAAAA,aAAA,iBAAA,IAAA,CAAA,IAAA,iBAAA;AACD,CAXD,EAAYA,yBAAAA,YAAA,GAAAA,eAAY,EAAZ,CAAZ;AAaA;;;AAGA,IAAAC,YAAA,aAAA,YAAA;AACE,WAAAA,SAAA;AACE;AACOC,OAFT;AAGE;;;;AAIOC,UAPT;AAQE;AACOC,SATT;AAUE;AACOC,iBAXT;AAYE;;;;;;AAMOC,aAlBT,EAkByD;AAPhD,QAAAD,oBAAA,KAAA,CAAA,EAAA;AAAAA,wBAAmC,kCAAgBE,GAAnD;AAAsD;AAOtD,QAAAD,gBAAA,KAAA,CAAA,EAAA;AAAAA,oBAA+B,gCAA/B;AAAgD;AAhBhD,SAAAJ,KAAA,GAAAA,KAAA;AAKA,SAAAC,QAAA,GAAAA,QAAA;AAEA,SAAAC,OAAA,GAAAA,OAAA;AAEA,SAAAC,eAAA,GAAAA,eAAA;AAOA,SAAAC,WAAA,GAAAA,WAAA;AACL;AAEJ;;;;AAIAL,YAAAO,SAAA,CAAAC,MAAA,GAAA,UAAOC,OAAP,EAGC;AACC,WAAO,IAAIT,SAAJ,CACL,KAAKC,KADA,EAEL,KAAKC,QAFA,EAGL,KAAKC,OAHA,EAILM,QAAQL,eAJH,EAKLK,QAAQJ,WALH,CAAP;AAOD,GAXD;AAaAL,YAAAO,SAAA,CAAAG,MAAA,GAAA,UAAOC,KAAP,EAAuB;AACrB,WACE,KAAKT,QAAL,KAAkBS,MAAMT,QAAxB,IACA,KAAKC,OAAL,KAAiBQ,MAAMR,OADvB,IAEA,KAAKC,eAAL,CAAqBM,MAArB,CAA4BC,MAAMP,eAAlC,CAFA,IAGA,KAAKC,WAAL,KAAqBM,MAAMN,WAH3B,IAIA,KAAKJ,KAAL,CAAWS,MAAX,CAAkBC,MAAMV,KAAxB,CALF;AAOD,GARD;AASF,SAAAD,SAAA;AAhDA,CAAA,EAAA;QCsCSA,S,GAAAA,S","file":"query_data.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { ProtoByteString, TargetId } from '../core/types';\nimport { emptyByteString } from '../platform/platform';\n\n/** An enumeration of the different purposes we have for queries. */\nexport enum QueryPurpose {\n  /** A regular, normal query. */\n  Listen,\n\n  /**\n   * The query was used to refill a query after an existence filter mismatch.\n   */\n  ExistenceFilterMismatch,\n\n  /** The query was used to resolve a limbo document. */\n  LimboResolution\n}\n\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nexport class QueryData {\n  constructor(\n    /** The query being listened to. */\n    public query: Query,\n    /**\n     * The target ID to which the query corresponds; Assigned by the\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\n     */\n    public targetId: TargetId,\n    /** The purpose of the query. */\n    public purpose: QueryPurpose,\n    /** The latest snapshot version seen for this target. */\n    public snapshotVersion: SnapshotVersion = SnapshotVersion.MIN,\n    /**\n     * An opaque, server-assigned token that allows watching a query to be\n     * resumed after disconnecting without retransmitting all the data that\n     * matches the query. The resume token essentially identifies a point in\n     * time from which the server should resume sending results.\n     */\n    public resumeToken: ProtoByteString = emptyByteString()\n  ) {}\n\n  /**\n   * Creates a new query data instance with an updated snapshot version and\n   * resume token.\n   */\n  update(updated: {\n    resumeToken: ProtoByteString;\n    snapshotVersion: SnapshotVersion;\n  }): QueryData {\n    return new QueryData(\n      this.query,\n      this.targetId,\n      this.purpose,\n      updated.snapshotVersion,\n      updated.resumeToken\n    );\n  }\n\n  equals(other: QueryData): boolean {\n    return (\n      this.targetId === other.targetId &&\n      this.purpose === other.purpose &&\n      this.snapshotVersion.equals(other.snapshotVersion) &&\n      this.resumeToken === other.resumeToken &&\n      this.query.equals(other.query)\n    );\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { emptyByteString } from '../platform/platform';\n/** An enumeration of the different purposes we have for queries. */\nexport var QueryPurpose;\n(function (QueryPurpose) {\n    /** A regular, normal query. */\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\n    /**\n     * The query was used to refill a query after an existence filter mismatch.\n     */\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\n    /** The query was used to resolve a limbo document. */\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\n})(QueryPurpose || (QueryPurpose = {}));\n/**\n * An immutable set of metadata that the local store tracks for each query.\n */\nvar QueryData = /** @class */ (function () {\n    function QueryData(\n        /** The query being listened to. */\n        query, \n        /**\n         * The target ID to which the query corresponds; Assigned by the\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\n         */\n        targetId, \n        /** The purpose of the query. */\n        purpose, \n        /** The latest snapshot version seen for this target. */\n        snapshotVersion, \n        /**\n         * An opaque, server-assigned token that allows watching a query to be\n         * resumed after disconnecting without retransmitting all the data that\n         * matches the query. The resume token essentially identifies a point in\n         * time from which the server should resume sending results.\n         */\n        resumeToken) {\n        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.MIN; }\n        if (resumeToken === void 0) { resumeToken = emptyByteString(); }\n        this.query = query;\n        this.targetId = targetId;\n        this.purpose = purpose;\n        this.snapshotVersion = snapshotVersion;\n        this.resumeToken = resumeToken;\n    }\n    /**\n     * Creates a new query data instance with an updated snapshot version and\n     * resume token.\n     */\n    QueryData.prototype.update = function (updated) {\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\n    };\n    QueryData.prototype.equals = function (other) {\n        return (this.targetId === other.targetId &&\n            this.purpose === other.purpose &&\n            this.snapshotVersion.equals(other.snapshotVersion) &&\n            this.resumeToken === other.resumeToken &&\n            this.query.equals(other.query));\n    };\n    return QueryData;\n}());\nexport { QueryData };\n\n\n"]}