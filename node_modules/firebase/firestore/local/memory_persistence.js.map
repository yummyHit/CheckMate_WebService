{"version":3,"sources":["src/firestore/local/memory_persistence.ts","firestore/local/memory_persistence.js"],"names":["LOG_TAG","MemoryPersistence","mutationQueues","remoteDocumentCache","queryCache","started","prototype","start","resolve","shutdown","getMutationQueue","user","queue","toKey","getQueryCache","getRemoteDocumentCache","runTransaction","action","operation","MemoryPersistenceTransaction","toPromise"],"mappings":";;;;;;;AAiBA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAvBA;;;;;;;;;;;;;;;AA8BA,IAAMA,UAAU,mBAAhB;AAEA;;;;AAIA,IAAAC,oBAAA,aAAA,YAAA;AAAA,aAAAA,iBAAA,GAAA;AACE;;;;;;;AAOQ,aAAAC,cAAA,GAAoD,EAApD;AACA,aAAAC,mBAAA,GAAsB,6DAAtB;AACA,aAAAC,UAAA,GAAa,0CAAb;AAEA,aAAAC,OAAA,GAAU,KAAV;AAwCT;AAtCCJ,sBAAAK,SAAA,CAAAC,KAAA,GAAA,YAAA;AACE,4BAAO,CAAC,KAAKF,OAAb,EAAsB,mCAAtB;AACA,aAAKA,OAAL,GAAe,IAAf;AACA;AACA,eAAO,qBAAQG,OAAR,EAAP;AACD,KALD;AAOAP,sBAAAK,SAAA,CAAAG,QAAA,GAAA,YAAA;AACE;AACA,4BAAO,KAAKJ,OAAZ,EAAqB,2CAArB;AACA,aAAKA,OAAL,GAAe,KAAf;AACA,eAAO,qBAAQG,OAAR,EAAP;AACD,KALD;AAOAP,sBAAAK,SAAA,CAAAI,gBAAA,GAAA,UAAiBC,IAAjB,EAA2B;AACzB,YAAIC,QAAQ,KAAKV,cAAL,CAAoBS,KAAKE,KAAL,EAApB,CAAZ;AACA,YAAI,CAACD,KAAL,EAAY;AACVA,oBAAQ,gDAAR;AACA,iBAAKV,cAAL,CAAoBS,KAAKE,KAAL,EAApB,IAAoCD,KAApC;AACD;AACD,eAAOA,KAAP;AACD,KAPD;AASAX,sBAAAK,SAAA,CAAAQ,aAAA,GAAA,YAAA;AACE,eAAO,KAAKV,UAAZ;AACD,KAFD;AAIAH,sBAAAK,SAAA,CAAAS,sBAAA,GAAA,YAAA;AACE,eAAO,KAAKZ,mBAAZ;AACD,KAFD;AAIAF,sBAAAK,SAAA,CAAAU,cAAA,GAAA,UACEC,MADF,EAEEC,SAFF,EAE2E;AAEzE,wBAAMlB,OAAN,EAAe,uBAAf,EAAwCiB,MAAxC;AACA,eAAOC,UAAU,IAAIC,4BAAJ,EAAV,EAA8CC,SAA9C,EAAP;AACD,KAND;AAOF,WAAAnB,iBAAA;AApDA,CAAA,EAAA;QCoCSA,iB,GAAAA,iB;ADkBT;;AACA,IAAAkB,+BAAA,aAAA,YAAA;AAAA,aAAAA,4BAAA,GAAA,CAAuE;AAAD,WAAAA,4BAAA;AAAtE,CAAA,EAAA","file":"memory_persistence.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { User } from '../auth/user';\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { PromiseImpl as Promise } from '../../utils/promise';\n\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryQueryCache } from './memory_query_cache';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nimport { MutationQueue } from './mutation_queue';\nimport { Persistence, PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { QueryCache } from './query_cache';\nimport { RemoteDocumentCache } from './remote_document_cache';\n\nconst LOG_TAG = 'MemoryPersistence';\n\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nexport class MemoryPersistence implements Persistence {\n  /**\n   * Note that these are retained here to make it easier to write tests\n   * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n   * can create a new LocalStore wrapping this Persistence instance and this\n   * will make the in-memory persistence layer behave as if it were actually\n   * persisting values.\n   */\n  private mutationQueues: { [user: string]: MutationQueue } = {};\n  private remoteDocumentCache = new MemoryRemoteDocumentCache();\n  private queryCache = new MemoryQueryCache();\n\n  private started = false;\n\n  start(): Promise<void> {\n    assert(!this.started, 'MemoryPersistence double-started!');\n    this.started = true;\n    // No durable state to read on startup.\n    return Promise.resolve();\n  }\n\n  shutdown(): Promise<void> {\n    // No durable state to ensure is closed on shutdown.\n    assert(this.started, 'MemoryPersistence shutdown without start!');\n    this.started = false;\n    return Promise.resolve();\n  }\n\n  getMutationQueue(user: User): MutationQueue {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue();\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache;\n  }\n\n  getRemoteDocumentCache(): RemoteDocumentCache {\n    return this.remoteDocumentCache;\n  }\n\n  runTransaction<T>(\n    action: string,\n    operation: (transaction: PersistenceTransaction) => PersistencePromise<T>\n  ): Promise<T> {\n    debug(LOG_TAG, 'Starting transaction:', action);\n    return operation(new MemoryPersistenceTransaction()).toPromise();\n  }\n}\n\n/** Dummy class since memory persistence doesn't actually use transactions. */\nclass MemoryPersistenceTransaction implements PersistenceTransaction {}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\nimport { debug } from '../util/log';\nimport { PromiseImpl as Promise } from '../../utils/promise';\nimport { MemoryMutationQueue } from './memory_mutation_queue';\nimport { MemoryQueryCache } from './memory_query_cache';\nimport { MemoryRemoteDocumentCache } from './memory_remote_document_cache';\nvar LOG_TAG = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nvar MemoryPersistence = /** @class */ (function () {\n    function MemoryPersistence() {\n        /**\n         * Note that these are retained here to make it easier to write tests\n         * affecting both the in-memory and IndexedDB-backed persistence layers. Tests\n         * can create a new LocalStore wrapping this Persistence instance and this\n         * will make the in-memory persistence layer behave as if it were actually\n         * persisting values.\n         */\n        this.mutationQueues = {};\n        this.remoteDocumentCache = new MemoryRemoteDocumentCache();\n        this.queryCache = new MemoryQueryCache();\n        this.started = false;\n    }\n    MemoryPersistence.prototype.start = function () {\n        assert(!this.started, 'MemoryPersistence double-started!');\n        this.started = true;\n        // No durable state to read on startup.\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.shutdown = function () {\n        // No durable state to ensure is closed on shutdown.\n        assert(this.started, 'MemoryPersistence shutdown without start!');\n        this.started = false;\n        return Promise.resolve();\n    };\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\n        var queue = this.mutationQueues[user.toKey()];\n        if (!queue) {\n            queue = new MemoryMutationQueue();\n            this.mutationQueues[user.toKey()] = queue;\n        }\n        return queue;\n    };\n    MemoryPersistence.prototype.getQueryCache = function () {\n        return this.queryCache;\n    };\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n        return this.remoteDocumentCache;\n    };\n    MemoryPersistence.prototype.runTransaction = function (action, operation) {\n        debug(LOG_TAG, 'Starting transaction:', action);\n        return operation(new MemoryPersistenceTransaction()).toPromise();\n    };\n    return MemoryPersistence;\n}());\nexport { MemoryPersistence };\n/** Dummy class since memory persistence doesn't actually use transactions. */\nvar MemoryPersistenceTransaction = /** @class */ (function () {\n    function MemoryPersistenceTransaction() {\n    }\n    return MemoryPersistenceTransaction;\n}());\n\n\n"]}