{"version":3,"sources":["src/firestore/local/no_op_garbage_collector.ts","firestore/local/no_op_garbage_collector.js"],"names":["NoOpGarbageCollector","isEager","prototype","addGarbageSource","garbageSource","removeGarbageSource","addPotentialGarbageKey","key","collectGarbage","txn","resolve"],"mappings":";;;;;;;AAgBA;;AAOA;;AAEA;;;;;AAzBA;;;;;;;;;;;;;;;AA8BA,IAAAA,uBAAA,aAAA,YAAA;AAAA,aAAAA,oBAAA,GAAA;AACW,aAAAC,OAAA,GAAU,KAAV;AAmBV;AAjBCD,yBAAAE,SAAA,CAAAC,gBAAA,GAAA,UAAiBC,aAAjB,EAA6C;AAC3C;AACD,KAFD;AAIAJ,yBAAAE,SAAA,CAAAG,mBAAA,GAAA,UAAoBD,aAApB,EAAgD;AAC9C;AACD,KAFD;AAIAJ,yBAAAE,SAAA,CAAAI,sBAAA,GAAA,UAAuBC,GAAvB,EAAuC;AACrC;AACD,KAFD;AAIAP,yBAAAE,SAAA,CAAAM,cAAA,GAAA,UACEC,GADF,EACoC;AAElC,eAAO,wCAAmBC,OAAnB,CAA2B,kCAA3B,CAAP;AACD,KAJD;AAKF,WAAAV,oBAAA;AApBA,CAAA,EAAA;QCUSA,oB,GAAAA,oB","file":"no_op_garbage_collector.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocumentKeySet, documentKeySet } from '../model/collections';\nimport { DocumentKey } from '../model/document_key';\nimport { PromiseImpl as Promise } from '../../utils/promise';\n\nimport { GarbageCollector } from './garbage_collector';\nimport { GarbageSource } from './garbage_source';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\n\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nexport class NoOpGarbageCollector implements GarbageCollector {\n  readonly isEager = false;\n\n  addGarbageSource(garbageSource: GarbageSource): void {\n    // Not tracking garbage so don't track sources.\n  }\n\n  removeGarbageSource(garbageSource: GarbageSource): void {\n    // Not tracking garbage so don't track sources.\n  }\n\n  addPotentialGarbageKey(key: DocumentKey): void {\n    // Not tracking garbage so ignore.\n  }\n\n  collectGarbage(\n    txn: PersistenceTransaction | null\n  ): PersistencePromise<DocumentKeySet> {\n    return PersistencePromise.resolve(documentKeySet());\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentKeySet } from '../model/collections';\nimport { PersistencePromise } from './persistence_promise';\n/**\n * A garbage collector implementation that does absolutely nothing. It ignores\n * all addGarbageSource and addPotentialGarbageKey messages and and never\n * produces any garbage.\n */\nvar NoOpGarbageCollector = /** @class */ (function () {\n    function NoOpGarbageCollector() {\n        this.isEager = false;\n    }\n    NoOpGarbageCollector.prototype.addGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.removeGarbageSource = function (garbageSource) {\n        // Not tracking garbage so don't track sources.\n    };\n    NoOpGarbageCollector.prototype.addPotentialGarbageKey = function (key) {\n        // Not tracking garbage so ignore.\n    };\n    NoOpGarbageCollector.prototype.collectGarbage = function (txn) {\n        return PersistencePromise.resolve(documentKeySet());\n    };\n    return NoOpGarbageCollector;\n}());\nexport { NoOpGarbageCollector };\n\n\n"]}