{"version":3,"sources":["src/firestore/local/indexeddb_remote_document_cache.ts","firestore/local/indexeddb_remote_document_cache.js"],"names":["IndexedDbRemoteDocumentCache","serializer","prototype","addEntry","transaction","maybeDocument","remoteDocumentsStore","put","dbKey","key","toDbRemoteDocument","removeEntry","documentKey","delete","getEntry","_this","get","next","dbRemoteDoc","fromDbRemoteDocument","getDocumentsMatchingQuery","query","results","startKey","path","toArray","range","IDBKeyRange","lowerBound","iterate","control","maybeDoc","isPrefixOf","done","matches","insert","txn","store","docKey"],"mappings":";;;;;;;AAiBA;;AACA;;AAEA;;AAEA;;AAKA;;AAEA,IAAAA,+BAAA,aAAA,YAAA;AACE,aAAAA,4BAAA,CAAoBC,UAApB,EAA+C;AAA3B,aAAAA,UAAA,GAAAA,UAAA;AAA+B;AAEnDD,iCAAAE,SAAA,CAAAC,QAAA,GAAA,UACEC,WADF,EAEEC,aAFF,EAE8B;AAE5B,eAAOC,qBAAqBF,WAArB,EAAkCG,GAAlC,CACLC,MAAMH,cAAcI,GAApB,CADK,EAEL,KAAKR,UAAL,CAAgBS,kBAAhB,CAAmCL,aAAnC,CAFK,CAAP;AAID,KARD;AAUAL,iCAAAE,SAAA,CAAAS,WAAA,GAAA,UACEP,WADF,EAEEQ,WAFF,EAE0B;AAExB,eAAON,qBAAqBF,WAArB,EAAkCS,MAAlC,CAAyCL,MAAMI,WAAN,CAAzC,CAAP;AACD,KALD;AAOAZ,iCAAAE,SAAA,CAAAY,QAAA,GAAA,UACEV,WADF,EAEEQ,WAFF,EAE0B;AAF1B,YAAAG,QAAA,IAAA;AAIE,eAAOT,qBAAqBF,WAArB,EACJY,GADI,CACAR,MAAMI,WAAN,CADA,EAEJK,IAFI,CAEC,UAAAC,WAAA,EAAW;AACf,mBAAOA,cACHH,MAAKd,UAAL,CAAgBkB,oBAAhB,CAAqCD,WAArC,CADG,GAEH,IAFJ;AAGD,SANI,CAAP;AAOD,KAXD;AAaAlB,iCAAAE,SAAA,CAAAkB,yBAAA,GAAA,UACEhB,WADF,EAEEiB,KAFF,EAEc;AAFd,YAAAN,QAAA,IAAA;AAIE,YAAIO,UAAU,+BAAd;AAEA;AACA;AACA,YAAMC,WAAWF,MAAMG,IAAN,CAAWC,OAAX,EAAjB;AACA,YAAMC,QAAQC,YAAYC,UAAZ,CAAuBL,QAAvB,CAAd;AACA,eAAOjB,qBAAqBF,WAArB,EACJyB,OADI,CACI,EAAEH,OAAKA,KAAP,EADJ,EACe,UAACjB,GAAD,EAAMS,WAAN,EAAmBY,OAAnB,EAA0B;AAC5C,gBAAMC,WAAWhB,MAAKd,UAAL,CAAgBkB,oBAAhB,CAAqCD,WAArC,CAAjB;AACA,gBAAI,CAACG,MAAMG,IAAN,CAAWQ,UAAX,CAAsBD,SAAStB,GAAT,CAAae,IAAnC,CAAL,EAA+C;AAC7CM,wBAAQG,IAAR;AACD,aAFD,MAEO,IAAIF,0CAAgCV,MAAMa,OAAN,CAAcH,QAAd,CAApC,EAA6D;AAClET,0BAAUA,QAAQa,MAAR,CAAeJ,SAAStB,GAAxB,EAA6BsB,QAA7B,CAAV;AACD;AACF,SARI,EASJd,IATI,CASC,YAAA;AAAM,mBAAAK,OAAA;AAAO,SATd,CAAP;AAUD,KApBD;AAqBF,WAAAtB,4BAAA;AAtDA,CAAA,EAAA,C,CA7BA;;;;;;;;;;;;;;;QC6DSA,4B,GAAAA,4B;ADwBT;;;;AAGA,SAAAM,oBAAA,CACE8B,GADF,EAC6B;AAE3B,QAAIA,6CAAJ,EAAwC;AACtC,eAAOA,IAAIC,KAAJ,CACL,mCAAiBA,KADZ,CAAP;AAGD,KAJD,MAIO;AACL,eAAO,kBAAK,sCAAL,CAAP;AACD;AACF;AAED,SAAA7B,KAAA,CAAe8B,MAAf,EAAkC;AAChC,WAAOA,OAAOd,IAAP,CAAYC,OAAZ,EAAP;AACD","file":"indexeddb_remote_document_cache.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../core/query';\nimport { DocumentMap, documentMap } from '../model/collections';\nimport { Document, MaybeDocument } from '../model/document';\nimport { DocumentKey } from '../model/document_key';\nimport { fail } from '../util/assert';\n\nimport { DbRemoteDocument, DbRemoteDocumentKey } from './indexeddb_schema';\nimport { LocalSerializer } from './local_serializer';\nimport { PersistenceTransaction } from './persistence';\nimport { PersistencePromise } from './persistence_promise';\nimport { RemoteDocumentCache } from './remote_document_cache';\nimport { SimpleDbStore, SimpleDbTransaction } from './simple_db';\n\nexport class IndexedDbRemoteDocumentCache implements RemoteDocumentCache {\n  constructor(private serializer: LocalSerializer) {}\n\n  addEntry(\n    transaction: PersistenceTransaction,\n    maybeDocument: MaybeDocument\n  ): PersistencePromise<void> {\n    return remoteDocumentsStore(transaction).put(\n      dbKey(maybeDocument.key),\n      this.serializer.toDbRemoteDocument(maybeDocument)\n    );\n  }\n\n  removeEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<void> {\n    return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n  }\n\n  getEntry(\n    transaction: PersistenceTransaction,\n    documentKey: DocumentKey\n  ): PersistencePromise<MaybeDocument | null> {\n    return remoteDocumentsStore(transaction)\n      .get(dbKey(documentKey))\n      .next(dbRemoteDoc => {\n        return dbRemoteDoc\n          ? this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n          : null;\n      });\n  }\n\n  getDocumentsMatchingQuery(\n    transaction: PersistenceTransaction,\n    query: Query\n  ): PersistencePromise<DocumentMap> {\n    let results = documentMap();\n\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const startKey = query.path.toArray();\n    const range = IDBKeyRange.lowerBound(startKey);\n    return remoteDocumentsStore(transaction)\n      .iterate({ range }, (key, dbRemoteDoc, control) => {\n        const maybeDoc = this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n        if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n          control.done();\n        } else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n          results = results.insert(maybeDoc.key, maybeDoc);\n        }\n      })\n      .next(() => results);\n  }\n}\n\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(\n  txn: PersistenceTransaction\n): SimpleDbStore<DbRemoteDocumentKey, DbRemoteDocument> {\n  if (txn instanceof SimpleDbTransaction) {\n    return txn.store<DbRemoteDocumentKey, DbRemoteDocument>(\n      DbRemoteDocument.store\n    );\n  } else {\n    return fail('Invalid transaction object provided!');\n  }\n}\n\nfunction dbKey(docKey: DocumentKey): DbRemoteDocumentKey {\n  return docKey.path.toArray();\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { documentMap } from '../model/collections';\nimport { Document } from '../model/document';\nimport { fail } from '../util/assert';\nimport { DbRemoteDocument } from './indexeddb_schema';\nimport { SimpleDbTransaction } from './simple_db';\nvar IndexedDbRemoteDocumentCache = /** @class */ (function () {\n    function IndexedDbRemoteDocumentCache(serializer) {\n        this.serializer = serializer;\n    }\n    IndexedDbRemoteDocumentCache.prototype.addEntry = function (transaction, maybeDocument) {\n        return remoteDocumentsStore(transaction).put(dbKey(maybeDocument.key), this.serializer.toDbRemoteDocument(maybeDocument));\n    };\n    IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {\n        return remoteDocumentsStore(transaction).delete(dbKey(documentKey));\n    };\n    IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {\n        var _this = this;\n        return remoteDocumentsStore(transaction)\n            .get(dbKey(documentKey))\n            .next(function (dbRemoteDoc) {\n            return dbRemoteDoc\n                ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc)\n                : null;\n        });\n    };\n    IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {\n        var _this = this;\n        var results = documentMap();\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\n        // the documents we need to match the query against.\n        var startKey = query.path.toArray();\n        var range = IDBKeyRange.lowerBound(startKey);\n        return remoteDocumentsStore(transaction)\n            .iterate({ range: range }, function (key, dbRemoteDoc, control) {\n            var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);\n            if (!query.path.isPrefixOf(maybeDoc.key.path)) {\n                control.done();\n            }\n            else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {\n                results = results.insert(maybeDoc.key, maybeDoc);\n            }\n        })\n            .next(function () { return results; });\n    };\n    return IndexedDbRemoteDocumentCache;\n}());\nexport { IndexedDbRemoteDocumentCache };\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n    if (txn instanceof SimpleDbTransaction) {\n        return txn.store(DbRemoteDocument.store);\n    }\n    else {\n        return fail('Invalid transaction object provided!');\n    }\n}\nfunction dbKey(docKey) {\n    return docKey.path.toArray();\n}\n\n\n"]}