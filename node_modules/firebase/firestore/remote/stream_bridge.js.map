{"version":3,"sources":["src/firestore/remote/stream_bridge.ts","firestore/remote/stream_bridge.js"],"names":["StreamBridge","args","wrappedOnOpen","wrappedOnClose","wrappedOnMessage","sendFn","closeFn","prototype","onOpen","callback","onClose","onMessage","close","send","msg","callOnOpen","callOnClose","err","callOnMessage"],"mappings":";;;;;;;AAgBA;;AAMA;;;;;AAKA,IAAAA,eAAA,aAAA,YAAA;AAQE,aAAAA,YAAA,CAAYC,IAAZ,EAAmE;AAP3D,aAAAC,aAAA,GAA4B,IAA5B;AACA,aAAAC,cAAA,GAAiD,IAAjD;AACA,aAAAC,gBAAA,GAAqC,IAArC;AAMN,aAAKC,MAAL,GAAcJ,KAAKI,MAAnB;AACA,aAAKC,OAAL,GAAeL,KAAKK,OAApB;AACD;AAEDN,iBAAAO,SAAA,CAAAC,MAAA,GAAA,UAAOC,QAAP,EAA2B;AACzB,4BAAO,CAAC,KAAKP,aAAb,EAA4B,gCAA5B;AACA,aAAKA,aAAL,GAAqBO,QAArB;AACD,KAHD;AAKAT,iBAAAO,SAAA,CAAAG,OAAA,GAAA,UAAQD,QAAR,EAAgD;AAC9C,4BAAO,CAAC,KAAKN,cAAb,EAA6B,iCAA7B;AACA,aAAKA,cAAL,GAAsBM,QAAtB;AACD,KAHD;AAKAT,iBAAAO,SAAA,CAAAI,SAAA,GAAA,UAAUF,QAAV,EAAoC;AAClC,4BAAO,CAAC,KAAKL,gBAAb,EAA+B,mCAA/B;AACA,aAAKA,gBAAL,GAAwBK,QAAxB;AACD,KAHD;AAKAT,iBAAAO,SAAA,CAAAK,KAAA,GAAA,YAAA;AACE,aAAKN,OAAL;AACD,KAFD;AAIAN,iBAAAO,SAAA,CAAAM,IAAA,GAAA,UAAKC,GAAL,EAAW;AACT,aAAKT,MAAL,CAAYS,GAAZ;AACD,KAFD;AAIAd,iBAAAO,SAAA,CAAAQ,UAAA,GAAA,YAAA;AACE,4BACE,KAAKb,aAAL,KAAuB,IADzB,EAEE,4CAA4C,SAF9C;AAIA,aAAKA,aAAL;AACD,KAND;AAQAF,iBAAAO,SAAA,CAAAS,WAAA,GAAA,UAAYC,GAAZ,EAAgC;AAC9B,4BACE,KAAKd,cAAL,KAAwB,IAD1B,EAEE,oCAAoC,kBAFtC;AAIA,aAAKA,cAAL,CAAoBc,GAApB;AACD,KAND;AAQAjB,iBAAAO,SAAA,CAAAW,aAAA,GAAA,UAAcJ,GAAd,EAAoB;AAClB,4BACE,KAAKV,gBAAL,KAA0B,IAD5B,EAEE,sCAAsC,kBAFxC;AAIA,aAAKA,gBAAL,CAAsBU,GAAtB;AACD,KAND;AAOF,WAAAd,YAAA;AA3DA,CAAA,EAAA,C,CA3BA;;;;;;;;;;;;;;;QC6DSA,Y,GAAAA,Y","file":"stream_bridge.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../util/assert';\nimport { FirestoreError } from '../util/error';\nimport { AnyJs } from '../util/misc';\n\nimport { Stream } from './connection';\n\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nexport class StreamBridge<I, O> implements Stream<I, O> {\n  private wrappedOnOpen: () => void = null as any;\n  private wrappedOnClose: (err?: FirestoreError) => void = null as any;\n  private wrappedOnMessage: (msg: O) => void = null as any;\n\n  private sendFn: (msg: I) => void;\n  private closeFn: () => void;\n\n  constructor(args: { sendFn: (msg: I) => void; closeFn: () => void }) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  onOpen(callback: () => void): void {\n    assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n    this.wrappedOnOpen = callback;\n  }\n\n  onClose(callback: (err?: FirestoreError) => void): void {\n    assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n    this.wrappedOnClose = callback;\n  }\n\n  onMessage(callback: (msg: O) => void): void {\n    assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n    this.wrappedOnMessage = callback;\n  }\n\n  close(): void {\n    this.closeFn();\n  }\n\n  send(msg: I): void {\n    this.sendFn(msg);\n  }\n\n  callOnOpen(): void {\n    assert(\n      this.wrappedOnOpen !== null,\n      'Cannot call onOpen because no callback ' + 'was set'\n    );\n    this.wrappedOnOpen();\n  }\n\n  callOnClose(err?: FirestoreError): void {\n    assert(\n      this.wrappedOnClose !== null,\n      'Cannot call onClose because no ' + 'callback was set'\n    );\n    this.wrappedOnClose(err);\n  }\n\n  callOnMessage(msg: O): void {\n    assert(\n      this.wrappedOnMessage !== null,\n      'Cannot call onMessage because no ' + 'callback was set'\n    );\n    this.wrappedOnMessage(msg);\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert';\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nvar StreamBridge = /** @class */ (function () {\n    function StreamBridge(args) {\n        this.wrappedOnOpen = null;\n        this.wrappedOnClose = null;\n        this.wrappedOnMessage = null;\n        this.sendFn = args.sendFn;\n        this.closeFn = args.closeFn;\n    }\n    StreamBridge.prototype.onOpen = function (callback) {\n        assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');\n        this.wrappedOnOpen = callback;\n    };\n    StreamBridge.prototype.onClose = function (callback) {\n        assert(!this.wrappedOnClose, 'Called onClose on stream twice!');\n        this.wrappedOnClose = callback;\n    };\n    StreamBridge.prototype.onMessage = function (callback) {\n        assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');\n        this.wrappedOnMessage = callback;\n    };\n    StreamBridge.prototype.close = function () {\n        this.closeFn();\n    };\n    StreamBridge.prototype.send = function (msg) {\n        this.sendFn(msg);\n    };\n    StreamBridge.prototype.callOnOpen = function () {\n        assert(this.wrappedOnOpen !== null, 'Cannot call onOpen because no callback ' + 'was set');\n        this.wrappedOnOpen();\n    };\n    StreamBridge.prototype.callOnClose = function (err) {\n        assert(this.wrappedOnClose !== null, 'Cannot call onClose because no ' + 'callback was set');\n        this.wrappedOnClose(err);\n    };\n    StreamBridge.prototype.callOnMessage = function (msg) {\n        assert(this.wrappedOnMessage !== null, 'Cannot call onMessage because no ' + 'callback was set');\n        this.wrappedOnMessage(msg);\n    };\n    return StreamBridge;\n}());\nexport { StreamBridge };\n\n\n"]}