{"version":3,"sources":["src/firestore/remote/rpc_error.ts"],"names":["isPermanentError","mapCodeFromRpcStatus","mapCodeFromRpcCode","mapRpcCodeFromCode","mapCodeFromHttpStatus","RpcCode","code","OK","CANCELLED","UNKNOWN","DEADLINE_EXCEEDED","RESOURCE_EXHAUSTED","INTERNAL","UNAVAILABLE","UNAUTHENTICATED","INVALID_ARGUMENT","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","DATA_LOSS","status","undefined"],"mappings":"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","file":"rpc_error.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fail } from '../util/assert';\nimport { Code } from '../util/error';\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers.\n */\nenum RpcCode {\n  OK = 0,\n  CANCELLED = 1,\n  UNKNOWN = 2,\n  INVALID_ARGUMENT = 3,\n  DEADLINE_EXCEEDED = 4,\n  NOT_FOUND = 5,\n  ALREADY_EXISTS = 6,\n  PERMISSION_DENIED = 7,\n  UNAUTHENTICATED = 16,\n  RESOURCE_EXHAUSTED = 8,\n  FAILED_PRECONDITION = 9,\n  ABORTED = 10,\n  OUT_OF_RANGE = 11,\n  UNIMPLEMENTED = 12,\n  INTERNAL = 13,\n  UNAVAILABLE = 14,\n  DATA_LOSS = 15\n}\n\nexport function isPermanentError(code: Code): boolean {\n  switch (code) {\n    case Code.OK:\n      return fail('Treated status OK as error');\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    // TODO(b/37325376): Give up after second unauthenticated error.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.\n *\n * @returns The Code equivalent to the given status string or undefined if\n *     there is no match.\n */\nexport function mapCodeFromRpcStatus(status: string): Code | undefined {\n  // tslint:disable-next-line:no-any lookup by string\n  const code: RpcCode = RpcCode[status as any] as any;\n  if (code === undefined) {\n    return undefined;\n  }\n\n  return mapCodeFromRpcCode(code);\n}\n\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nexport function mapCodeFromRpcCode(code: number): Code {\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Maps an RPC code from a Code. This is the reverse operation from\n * mapCodeFromRpcCode and should really only be used in tests.\n */\nexport function mapRpcCodeFromCode(code: Code | undefined): number {\n  if (code === undefined) {\n    return RpcCode.OK;\n  }\n\n  switch (code) {\n    case Code.OK:\n      return RpcCode.OK;\n    case Code.CANCELLED:\n      return RpcCode.CANCELLED;\n    case Code.UNKNOWN:\n      return RpcCode.UNKNOWN;\n    case Code.DEADLINE_EXCEEDED:\n      return RpcCode.DEADLINE_EXCEEDED;\n    case Code.RESOURCE_EXHAUSTED:\n      return RpcCode.RESOURCE_EXHAUSTED;\n    case Code.INTERNAL:\n      return RpcCode.INTERNAL;\n    case Code.UNAVAILABLE:\n      return RpcCode.UNAVAILABLE;\n    case Code.UNAUTHENTICATED:\n      return RpcCode.UNAUTHENTICATED;\n    case Code.INVALID_ARGUMENT:\n      return RpcCode.INVALID_ARGUMENT;\n    case Code.NOT_FOUND:\n      return RpcCode.NOT_FOUND;\n    case Code.ALREADY_EXISTS:\n      return RpcCode.ALREADY_EXISTS;\n    case Code.PERMISSION_DENIED:\n      return RpcCode.PERMISSION_DENIED;\n    case Code.FAILED_PRECONDITION:\n      return RpcCode.FAILED_PRECONDITION;\n    case Code.ABORTED:\n      return RpcCode.ABORTED;\n    case Code.OUT_OF_RANGE:\n      return RpcCode.OUT_OF_RANGE;\n    case Code.UNIMPLEMENTED:\n      return RpcCode.UNIMPLEMENTED;\n    case Code.DATA_LOSS:\n      return RpcCode.DATA_LOSS;\n    default:\n      return fail('Unknown status code: ' + code);\n  }\n}\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nexport function mapCodeFromHttpStatus(status: number): Code {\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  //\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (status) {\n    case 200: // OK\n      return Code.OK;\n\n    case 400: // Bad Request\n      return Code.INVALID_ARGUMENT;\n    // Other possibilities based on the forward mapping\n    // return Code.FAILED_PRECONDITION;\n    // return Code.OUT_OF_RANGE;\n\n    case 401: // Unauthorized\n      return Code.UNAUTHENTICATED;\n\n    case 403: // Forbidden\n      return Code.PERMISSION_DENIED;\n\n    case 404: // Not Found\n      return Code.NOT_FOUND;\n\n    case 409: // Conflict\n      return Code.ABORTED;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416: // Range Not Satisfiable\n      return Code.OUT_OF_RANGE;\n\n    case 429: // Too Many Requests\n      return Code.RESOURCE_EXHAUSTED;\n\n    case 499: // Client Closed Request\n      return Code.CANCELLED;\n\n    case 500: // Internal Server Error\n      return Code.UNKNOWN;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501: // Unimplemented\n      return Code.UNIMPLEMENTED;\n\n    case 503: // Service Unavailable\n      return Code.UNAVAILABLE;\n\n    case 504: // Gateway Timeout\n      return Code.DEADLINE_EXCEEDED;\n\n    default:\n      if (status >= 200 && status < 300) return Code.OK;\n      if (status >= 400 && status < 500) return Code.FAILED_PRECONDITION;\n      if (status >= 500 && status < 600) return Code.INTERNAL;\n      return Code.UNKNOWN;\n  }\n}\n"]}