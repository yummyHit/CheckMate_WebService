{"version":3,"sources":["src/firestore/api/field_path.ts","firestore/api/field_path.js"],"names":["fromDotSeparatedString","FieldPath","fieldNames","_i","arguments","length","i","INVALID_ARGUMENT","_internalPath","documentId","_DOCUMENT_ID","keyField","canonicalString","RESERVED","RegExp","path","found","search","bind","apply","concat","split","e"],"mappings":";;;;;;QA0FMA,sB,GAAAA,sB;;AAxEN;;AACA;;AACA;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA,IAAAC,YAAA,aAAA,YAAA;AAIE;;;;;;AAMA,aAAAA,SAAA,GAAA;AAAY,YAAAC,aAAA,EAAA;ACTN,aDSM,IAAAC,KAAA,CCTN,EDSMA,KAAAC,UAAAC,MCTN,EDSMF,ICTN,EDS6B;AAAvBD,uBAAAC,EAAA,IAAAC,UAAAD,EAAA,CAAA;ACPL;ADQL,yEACE,WADF,EAEED,UAFF,EAGE,YAHF,EAIE,CAJF;AAOA,aAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIJ,WAAWG,MAA/B,EAAuC,EAAEC,CAAzC,EAA4C;AAC1C,mDAAgB,WAAhB,EAA6B,QAA7B,EAAuCA,CAAvC,EAA0CJ,WAAWI,CAAX,CAA1C;AACA,gBAAIJ,WAAWI,CAAX,EAAcD,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,sBAAM,0BACJ,YAAKE,gBADD,EAEJ,8CACE,gCAHE,CAAN;AAKD;AACF;AAED,aAAKC,aAAL,GAAqB,oBAAsBN,UAAtB,CAArB;AACD;AAYaD,cAAAQ,UAAA,GAAd,YAAA;AACE,eAAOR,UAAUS,YAAjB;AACD,KAFa;AAVd;;;;;;AAMwBT,cAAAS,YAAA,GAAe,IAAIT,SAAJ,CACrC,gBAAkBU,QAAlB,GAA6BC,eAA7B,EADqC,CAAf;AAO1B,WAAAX,SAAA;AA7CA,CAAA,EAAA,C,CAnCA;;;;;;;;;;;;;;;QAmCaA,S,GAAAA,S;AA+Cb;;;;AAGA,IAAMY,WAAW,IAAIC,MAAJ,CAAW,eAAX,CAAjB;AAEA;;;AAGM,SAAAd,sBAAA,CAAiCe,IAAjC,EAA6C;AACjD,QAAMC,QAAQD,KAAKE,MAAL,CAAYJ,QAAZ,CAAd;AACA,QAAIG,SAAS,CAAb,EAAgB;AACd,cAAM,0BACJ,YAAKT,gBADD,EAEJ,yBAAuBQ,IAAvB,GAA2B,4BAA3B,GACE,4BAHE,CAAN;AAKD;AACD,QAAI;AACF,eAAM,KAAKd,UAASiB,IAAT,CAASC,KAAT,CAAAlB,SAAA,EAAS,CAAA,KAAA,CAAA,EAAAmB,MAAA,CAAIL,KAAKM,KAAL,CAAW,GAAX,CAAJ,CAAT,CAAL,GAAN;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,cAAM,0BACJ,YAAKf,gBADD,EAEJ,yBAAuBQ,IAAvB,GAA2B,8BAA3B,GACE,+CAHE,CAAN;AAKD;AACF","file":"field_path.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from 'firestore';\n\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateNamedArrayAtLeastNumberOfElements\n} from '../util/input_validation';\n\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nexport class FieldPath implements firestore.FieldPath {\n  /** Internal representation of a Firestore field path. */\n  _internalPath: InternalFieldPath;\n\n  /**\n   * Creates a FieldPath from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames A list of field names.\n   */\n  constructor(...fieldNames: string[]) {\n    validateNamedArrayAtLeastNumberOfElements(\n      'FieldPath',\n      fieldNames,\n      'fieldNames',\n      1\n    );\n\n    for (let i = 0; i < fieldNames.length; ++i) {\n      validateArgType('FieldPath', 'string', i, fieldNames[i]);\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(\n          Code.INVALID_ARGUMENT,\n          `Invalid field name at argument $(i + 1). ` +\n            'Field names must not be empty.'\n        );\n      }\n    }\n\n    this._internalPath = new InternalFieldPath(fieldNames);\n  }\n\n  /**\n   * Internal Note: The backend doesn't technically support querying by\n   * document ID. Instead it queries by the entire document name (full path\n   * included), but in the cases we currently support documentId(), the net\n   * effect is the same.\n   */\n  private static readonly _DOCUMENT_ID = new FieldPath(\n    InternalFieldPath.keyField().canonicalString()\n  );\n\n  public static documentId(): FieldPath {\n    return FieldPath._DOCUMENT_ID;\n  }\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path: string): FieldPath {\n  const found = path.search(RESERVED);\n  if (found >= 0) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not contain ` +\n        `'~', '*', '/', '[', or ']'`\n    );\n  }\n  try {\n    return new FieldPath(...path.split('.'));\n  } catch (e) {\n    throw new FirestoreError(\n      Code.INVALID_ARGUMENT,\n      `Invalid field path (${path}). Paths must not be empty, ` +\n        `begin with '.', end with '.', or contain '..'`\n    );\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FieldPath as InternalFieldPath } from '../model/path';\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateNamedArrayAtLeastNumberOfElements } from '../util/input_validation';\n// The objects that are a part of this API are exposed to third-parties as\n// compiled javascript so we want to flag our private members with a leading\n// underscore to discourage their use.\n// tslint:disable:strip-private-property-underscore\n/**\n * A FieldPath refers to a field in a document. The path may consist of a single\n * field name (referring to a top-level field in the document), or a list of\n * field names (referring to a nested field in the document).\n */\nvar FieldPath = /** @class */ (function () {\n    /**\n     * Creates a FieldPath from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames A list of field names.\n     */\n    function FieldPath() {\n        var fieldNames = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            fieldNames[_i] = arguments[_i];\n        }\n        validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);\n        for (var i = 0; i < fieldNames.length; ++i) {\n            validateArgType('FieldPath', 'string', i, fieldNames[i]);\n            if (fieldNames[i].length === 0) {\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\n                    'Field names must not be empty.');\n            }\n        }\n        this._internalPath = new InternalFieldPath(fieldNames);\n    }\n    FieldPath.documentId = function () {\n        return FieldPath._DOCUMENT_ID;\n    };\n    /**\n     * Internal Note: The backend doesn't technically support querying by\n     * document ID. Instead it queries by the entire document name (full path\n     * included), but in the cases we currently support documentId(), the net\n     * effect is the same.\n     */\n    FieldPath._DOCUMENT_ID = new FieldPath(InternalFieldPath.keyField().canonicalString());\n    return FieldPath;\n}());\nexport { FieldPath };\n/**\n * Matches any characters in a field path string that are reserved.\n */\nvar RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Parses a field path string into a FieldPath, treating dots as separators.\n */\nexport function fromDotSeparatedString(path) {\n    var found = path.search(RESERVED);\n    if (found >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not contain \" +\n            \"'~', '*', '/', '[', or ']'\");\n    }\n    try {\n        return new (FieldPath.bind.apply(FieldPath, [void 0].concat(path.split('.'))))();\n    }\n    catch (e) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, \" +\n            \"begin with '.', end with '.', or contain '..'\");\n    }\n}\n\n\n"]}