{"version":3,"sources":["src/firestore/api/blob.ts","firestore/api/blob.js"],"names":["assertUint8ArrayAvailable","Uint8Array","UNIMPLEMENTED","assertBase64Available","getPlatform","base64Available","Blob","binaryString","_binaryString","fromBase64String","base64","arguments","atob","e","INVALID_ARGUMENT","fromUint8Array","array","Array","prototype","map","call","char","String","fromCharCode","join","toBase64","btoa","toUint8Array","buffer","length","i","charCodeAt","toString","_equals","other","_compareTo","PublicBlob"],"mappings":"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","file":"blob.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  invalidClassError,\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Uint8Arrays are not available in this environment.'\n    );\n  }\n}\n\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n  if (!PlatformSupport.getPlatform().base64Available) {\n    throw new FirestoreError(\n      Code.UNIMPLEMENTED,\n      'Blobs are unavailable in Firestore in this environment.'\n    );\n  }\n}\n\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nexport class Blob {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion.\n  // A binary string is a string with each char as Unicode code point in the\n  // range of [0, 255], essentially simulating a byte array.\n  private _binaryString: string;\n\n  private constructor(binaryString: string) {\n    assertBase64Available();\n    this._binaryString = binaryString;\n  }\n\n  static fromBase64String(base64: string): Blob {\n    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n    validateArgType('Blob.fromBase64String', 'string', 1, base64);\n    assertBase64Available();\n    try {\n      const binaryString = PlatformSupport.getPlatform().atob(base64);\n      return new Blob(binaryString);\n    } catch (e) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Failed to construct Blob from Base64 string: ' + e\n      );\n    }\n  }\n\n  static fromUint8Array(array: Uint8Array): Blob {\n    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n    assertUint8ArrayAvailable();\n    if (!(array instanceof Uint8Array)) {\n      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n    }\n    // We can't call array.map directly because it expects the return type to\n    // be a Uint8Array, whereas we can convert it to a regular array by invoking\n    // map on the Array prototype.\n    const binaryString = Array.prototype.map\n      .call(array, (char: number) => {\n        return String.fromCharCode(char);\n      })\n      .join('');\n    return new Blob(binaryString);\n  }\n\n  public toBase64(): string {\n    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n    assertBase64Available();\n    return PlatformSupport.getPlatform().btoa(this._binaryString);\n  }\n\n  public toUint8Array(): Uint8Array {\n    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n    assertUint8ArrayAvailable();\n    const buffer = new Uint8Array(this._binaryString.length);\n    for (let i = 0; i < this._binaryString.length; i++) {\n      buffer[i] = this._binaryString.charCodeAt(i);\n    }\n    return buffer;\n  }\n\n  public toString(): string {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _equals(other: Blob): boolean {\n    return this._binaryString === other._binaryString;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _compareTo(other: Blob): number {\n    return primitiveComparator(this._binaryString, other._binaryString);\n  }\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport let PublicBlob = makeConstructorPrivate(\n  Blob,\n  'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.'\n);\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PlatformSupport } from '../platform/platform';\nimport { makeConstructorPrivate } from '../util/api';\nimport { Code, FirestoreError } from '../util/error';\nimport { invalidClassError, validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/** Helper function to assert Uint8Array is available at runtime. */\nfunction assertUint8ArrayAvailable() {\n    if (typeof Uint8Array === 'undefined') {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n    }\n}\n/** Helper function to assert Base64 functions are available at runtime. */\nfunction assertBase64Available() {\n    if (!PlatformSupport.getPlatform().base64Available) {\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');\n    }\n}\n/**\n * Immutable class holding a blob (binary data).\n * This class is directly exposed in the public API.\n *\n * Note that while you can't hide the constructor in JavaScript code, we are\n * using the hack above to make sure no-one outside this module can call it.\n */\nvar Blob = /** @class */ (function () {\n    function Blob(binaryString) {\n        assertBase64Available();\n        this._binaryString = binaryString;\n    }\n    Blob.fromBase64String = function (base64) {\n        validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);\n        validateArgType('Blob.fromBase64String', 'string', 1, base64);\n        assertBase64Available();\n        try {\n            var binaryString = PlatformSupport.getPlatform().atob(base64);\n            return new Blob(binaryString);\n        }\n        catch (e) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);\n        }\n    };\n    Blob.fromUint8Array = function (array) {\n        validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);\n        assertUint8ArrayAvailable();\n        if (!(array instanceof Uint8Array)) {\n            throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);\n        }\n        // We can't call array.map directly because it expects the return type to\n        // be a Uint8Array, whereas we can convert it to a regular array by invoking\n        // map on the Array prototype.\n        var binaryString = Array.prototype.map\n            .call(array, function (char) {\n            return String.fromCharCode(char);\n        })\n            .join('');\n        return new Blob(binaryString);\n    };\n    Blob.prototype.toBase64 = function () {\n        validateExactNumberOfArgs('Blob.toBase64', arguments, 0);\n        assertBase64Available();\n        return PlatformSupport.getPlatform().btoa(this._binaryString);\n    };\n    Blob.prototype.toUint8Array = function () {\n        validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);\n        assertUint8ArrayAvailable();\n        var buffer = new Uint8Array(this._binaryString.length);\n        for (var i = 0; i < this._binaryString.length; i++) {\n            buffer[i] = this._binaryString.charCodeAt(i);\n        }\n        return buffer;\n    };\n    Blob.prototype.toString = function () {\n        return 'Blob(base64: ' + this.toBase64() + ')';\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._equals = function (other) {\n        return this._binaryString === other._binaryString;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    Blob.prototype._compareTo = function (other) {\n        return primitiveComparator(this._binaryString, other._binaryString);\n    };\n    return Blob;\n}());\nexport { Blob };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting Blob on firebase.firestore.Blob and will be called Blob\n// publicly. Internally we still use Blob which has a type checked private\n// constructor. Note that Blob and PublicBlob can be used interchangeably in\n// instanceof checks.\n// For our internal TypeScript code PublicBlob doesn't exist as a type, and so\n// we need to use Blob as type and export it too.\n// tslint:disable-next-line:variable-name We're treating this as a class name.\nexport var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');\n\n\n"]}