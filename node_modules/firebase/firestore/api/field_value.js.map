{"version":3,"sources":["src/firestore/api/field_value.ts","firestore/api/field_value.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","FieldValueImpl","delete","DeleteFieldValueImpl","instance","serverTimestamp","ServerTimestampFieldValueImpl","_super","call","PublicFieldValue"],"mappings":";;;;;;;AAkBA;;AAlBA;;;;;;;;;;;;;;;ACeA,IAAIA,YAAa,aAAQ,UAAKA,SAAd,IAA6B,YAAY;AACrD,QAAIC,gBAAgBC,OAAOC,cAAP,IACf,EAAEC,WAAW,EAAb,cAA6BC,KAA7B,IAAsC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAED,UAAEF,SAAF,GAAcG,CAAd;AAAkB,KAD3D,IAEhB,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAK,IAAIC,CAAT,IAAcD,CAAd;AAAiB,gBAAIA,EAAEE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,EAAEE,CAAF,IAAOD,EAAEC,CAAF,CAAP;AAA1C;AAAwD,KAF9E;AAGA,WAAO,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AACnBN,sBAAcK,CAAd,EAAiBC,CAAjB;AACA,iBAASG,EAAT,GAAc;AAAE,iBAAKC,WAAL,GAAmBL,CAAnB;AAAuB;AACvCA,UAAEM,SAAF,GAAcL,MAAM,IAAN,GAAaL,OAAOW,MAAP,CAAcN,CAAd,CAAb,IAAiCG,GAAGE,SAAH,GAAeL,EAAEK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,KAJD;AAKH,CAT2C,EAA5C;;ADKA;;;;AAIA;AACA,IAAAI,iBAAA,aAAA,YAAA;AAAA,aAAAA,cAAA,GAAA,CAOC;AANQA,mBAAAC,MAAA,GAAP,YAAA;AACE,eAAOC,qBAAqBC,QAA5B;AACD,KAFM;AAGAH,mBAAAI,eAAA,GAAP,YAAA;AACE,eAAOC,8BAA8BF,QAArC;AACD,KAFM;AAGT,WAAAH,cAAA;AAPA,CAAA,EAAA;QCiBSA,c,GAAAA,c;;ADRT,IAAAE,uBAAA,aAAA,UAAAI,MAAA,EAAA;AAA0CpB,cAAAgB,oBAAA,EAAAI,MAAA;AACxC,aAAAJ,oBAAA,GAAA;ACWM,eDVJI,OAAAC,IAAA,CAAA,IAAA,KAAO,ICUH;ADTL;AACD;AACOL,yBAAAC,QAAA,GAAW,IAAID,oBAAJ,EAAX;AACT,WAAAA,oBAAA;AANA,CAAA,CAA0CF,cAA1C,CAAA;QAAaE,oB,GAAAA,oB;;AAQb,IAAAG,gCAAA,aAAA,UAAAC,MAAA,EAAA;AAAmDpB,cAAAmB,6BAAA,EAAAC,MAAA;AACjD,aAAAD,6BAAA,GAAA;ACaM,eDZJC,OAAAC,IAAA,CAAA,IAAA,KAAO,ICYH;ADXL;AACD;AACOF,kCAAAF,QAAA,GAAW,IAAIE,6BAAJ,EAAX;AACT,WAAAA,6BAAA;AANA,CAAA,CAAmDL,cAAnD,CAAA;QAAaK,6B,GAAAA,6B;AAQb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMG,8CAAmB,iCAC9BR,cAD8B,EAE9B,mCAF8B,CAAzB","file":"field_value.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as firestore from 'firestore';\n\nimport { makeConstructorPrivate } from '../util/api';\n\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nexport abstract class FieldValueImpl implements firestore.FieldValue {\n  static delete(): FieldValueImpl {\n    return DeleteFieldValueImpl.instance;\n  }\n  static serverTimestamp(): FieldValueImpl {\n    return ServerTimestampFieldValueImpl.instance;\n  }\n}\n\nexport class DeleteFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super();\n  }\n  /** Singleton instance. */\n  static instance = new DeleteFieldValueImpl();\n}\n\nexport class ServerTimestampFieldValueImpl extends FieldValueImpl {\n  private constructor() {\n    super();\n  }\n  /** Singleton instance. */\n  static instance = new ServerTimestampFieldValueImpl();\n}\n\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport const PublicFieldValue = makeConstructorPrivate(\n  FieldValueImpl,\n  'Use FieldValue.<field>() instead.'\n);\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { makeConstructorPrivate } from '../util/api';\n/**\n * An opaque base class for FieldValue sentinel objects in our public API,\n * with public static methods for creating said sentinel objects.\n */\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\nvar FieldValueImpl = /** @class */ (function () {\n    function FieldValueImpl() {\n    }\n    FieldValueImpl.delete = function () {\n        return DeleteFieldValueImpl.instance;\n    };\n    FieldValueImpl.serverTimestamp = function () {\n        return ServerTimestampFieldValueImpl.instance;\n    };\n    return FieldValueImpl;\n}());\nexport { FieldValueImpl };\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\n    __extends(DeleteFieldValueImpl, _super);\n    function DeleteFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\n    return DeleteFieldValueImpl;\n}(FieldValueImpl));\nexport { DeleteFieldValueImpl };\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\n    __extends(ServerTimestampFieldValueImpl, _super);\n    function ServerTimestampFieldValueImpl() {\n        return _super.call(this) || this;\n    }\n    /** Singleton instance. */\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\n    return ServerTimestampFieldValueImpl;\n}(FieldValueImpl));\nexport { ServerTimestampFieldValueImpl };\n// Public instance that disallows construction at runtime. This constructor is\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\n// has a type-checked private constructor. Note that FieldValueImpl and\n// PublicFieldValue can be used interchangeably in instanceof checks.\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\n// and so we need to use FieldValueImpl as type and export it too.\n// tslint:disable-next-line:variable-name  We treat this as a class name.\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\n\n\n"]}