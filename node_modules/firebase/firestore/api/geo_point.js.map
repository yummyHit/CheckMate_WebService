{"version":3,"sources":["src/firestore/api/geo_point.ts","firestore/api/geo_point.js"],"names":["GeoPoint","latitude","longitude","arguments","isFinite","INVALID_ARGUMENT","_lat","_long","Object","defineProperty","prototype","get","enumerable","configurable","_equals","other","_compareTo"],"mappings":";;;;;;;AAgBA;;AACA;;AAIA;;AAEA;;;;AAIA,IAAAA,WAAA,aAAA,YAAA;AAME,aAAAA,QAAA,CAAYC,QAAZ,EAA8BC,SAA9B,EAA+C;AAC7C,yDAA0B,UAA1B,EAAsCC,SAAtC,EAAiD,CAAjD;AACA,+CAAgB,UAAhB,EAA4B,QAA5B,EAAsC,CAAtC,EAAyCF,QAAzC;AACA,+CAAgB,UAAhB,EAA4B,QAA5B,EAAsC,CAAtC,EAAyCC,SAAzC;AACA,YAAI,CAACE,SAASH,QAAT,CAAD,IAAuBA,WAAW,CAAC,EAAnC,IAAyCA,WAAW,EAAxD,EAA4D;AAC1D,kBAAM,0BACJ,YAAKI,gBADD,EAEJ,4DAA4DJ,QAFxD,CAAN;AAID;AACD,YAAI,CAACG,SAASF,SAAT,CAAD,IAAwBA,YAAY,CAAC,GAArC,IAA4CA,YAAY,GAA5D,EAAiE;AAC/D,kBAAM,0BACJ,YAAKG,gBADD,EAEJ,+DAA+DH,SAF3D,CAAN;AAID;AAED,aAAKI,IAAL,GAAYL,QAAZ;AACA,aAAKM,KAAL,GAAaL,SAAb;AACD;AAKDM,WAAAC,cAAA,CAAIT,SAAAU,SAAJ,EAAI,UAAJ,EAAY;AAHZ;;;ACdMC,aDiBN,eAAA;AACE,mBAAO,KAAKL,IAAZ;AACD,SAFW;ACdNM,oBAAY,IDcN;ACbNC,sBAAc;ADaR,KAAZ;AAOAL,WAAAC,cAAA,CAAIT,SAAAU,SAAJ,EAAI,WAAJ,EAAa;AAHb;;;ACXMC,aDcN,eAAA;AACE,mBAAO,KAAKJ,KAAZ;AACD,SAFY;ACXPK,oBAAY,IDWL;ACVPC,sBAAc;ADUP,KAAb;AAIA;;;;AAIOb,aAAAU,SAAA,CAAAI,OAAA,GAAP,UAAeC,KAAf,EAA8B;AAC5B,eAAO,KAAKT,IAAL,KAAcS,MAAMT,IAApB,IAA4B,KAAKC,KAAL,KAAeQ,MAAMR,KAAxD;AACD,KAFM;AAIP;;;;AAIOP,aAAAU,SAAA,CAAAM,UAAA,GAAP,UAAkBD,KAAlB,EAAiC;AAC/B,eACE,+BAAoB,KAAKT,IAAzB,EAA+BS,MAAMT,IAArC,KACA,+BAAoB,KAAKC,KAAzB,EAAgCQ,MAAMR,KAAtC,CAFF;AAID,KALM;AAMT,WAAAP,QAAA;AA3DA,CAAA,EAAA,C,CA3BA;;;;;;;;;;;;;;;QCyESA,Q,GAAAA,Q","file":"geo_point.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirestoreError } from '../util/error';\nimport {\n  validateArgType,\n  validateExactNumberOfArgs\n} from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nexport class GeoPoint {\n  // Prefix with underscore to signal this is a private variable in JS and\n  // prevent it showing up for autocompletion when typing latitude or longitude.\n  private _lat: number;\n  private _long: number;\n\n  constructor(latitude: number, longitude: number) {\n    validateExactNumberOfArgs('GeoPoint', arguments, 2);\n    validateArgType('GeoPoint', 'number', 1, latitude);\n    validateArgType('GeoPoint', 'number', 2, longitude);\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Latitude must be a number between -90 and 90, but was: ' + latitude\n      );\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(\n        Code.INVALID_ARGUMENT,\n        'Longitude must be a number between -180 and 180, but was: ' + longitude\n      );\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  /**\n   * Returns the latitude of this geo point, a number between -90 and 90.\n   */\n  get latitude(): number {\n    return this._lat;\n  }\n\n  /**\n   * Returns the longitude of this geo point, a number between -180 and 180.\n   */\n  get longitude(): number {\n    return this._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _equals(other: GeoPoint): boolean {\n    return this._lat === other._lat && this._long === other._long;\n  }\n\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  public _compareTo(other: GeoPoint): number {\n    return (\n      primitiveComparator(this._lat, other._lat) ||\n      primitiveComparator(this._long, other._long)\n    );\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Code, FirestoreError } from '../util/error';\nimport { validateArgType, validateExactNumberOfArgs } from '../util/input_validation';\nimport { primitiveComparator } from '../util/misc';\n/**\n * Immutable class representing a geo point as latitude-longitude pair.\n * This class is directly exposed in the public API, including its constructor.\n */\nvar GeoPoint = /** @class */ (function () {\n    function GeoPoint(latitude, longitude) {\n        validateExactNumberOfArgs('GeoPoint', arguments, 2);\n        validateArgType('GeoPoint', 'number', 1, latitude);\n        validateArgType('GeoPoint', 'number', 2, longitude);\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n        }\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n        }\n        this._lat = latitude;\n        this._long = longitude;\n    }\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n        /**\n         * Returns the latitude of this geo point, a number between -90 and 90.\n         */\n        get: function () {\n            return this._lat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n        /**\n         * Returns the longitude of this geo point, a number between -180 and 180.\n         */\n        get: function () {\n            return this._long;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._equals = function (other) {\n        return this._lat === other._lat && this._long === other._long;\n    };\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n    GeoPoint.prototype._compareTo = function (other) {\n        return (primitiveComparator(this._lat, other._lat) ||\n            primitiveComparator(this._long, other._long));\n    };\n    return GeoPoint;\n}());\nexport { GeoPoint };\n\n\n"]}