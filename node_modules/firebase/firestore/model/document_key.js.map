{"version":3,"sources":["src/firestore/model/document_key.ts"],"names":["DocumentKey","path","isDocumentKey","toArray","join","prototype","equals","other","comparator","toString","k1","k2","length","fromSegments","segments","slice","fromPathString","fromString","EMPTY"],"mappings":";;;;;;;AAgBA;;AAEA;;AAlBA;;;;;;;;;;;;;;;AAoBA,IAAAA,cAAA,aAAA,YAAA;AACE,aAAAA,WAAA,CAAqBC,IAArB,EAAuC;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AACnB,4BACED,YAAYE,aAAZ,CAA0BD,IAA1B,CADF,EAEE,yDACEA,KAAKE,OAAL,GAAeC,IAAf,CAAoB,GAApB,CAHJ;AAKD;AAEDJ,gBAAAK,SAAA,CAAAC,MAAA,GAAA,UAAOC,KAAP,EAAgC;AAC9B,eACEA,UAAU,IAAV,IAAkB,mBAAaC,UAAb,CAAwB,KAAKP,IAA7B,EAAmCM,MAAMN,IAAzC,MAAmD,CADvE;AAGD,KAJD;AAMAD,gBAAAK,SAAA,CAAAI,QAAA,GAAA,YAAA;AACE,eAAO,KAAKR,IAAL,CAAUQ,QAAV,EAAP;AACD,KAFD;AAMOT,gBAAAQ,UAAA,GAAP,UAAkBE,EAAlB,EAAmCC,EAAnC,EAAkD;AAChD,eAAO,mBAAaH,UAAb,CAAwBE,GAAGT,IAA3B,EAAiCU,GAAGV,IAApC,CAAP;AACD,KAFM;AAIAD,gBAAAE,aAAA,GAAP,UAAqBD,IAArB,EAAuC;AACrC,eAAOA,KAAKW,MAAL,GAAc,CAAd,KAAoB,CAA3B;AACD,KAFM;AAIP;;;;;;AAMOZ,gBAAAa,YAAA,GAAP,UAAoBC,QAApB,EAAsC;AACpC,eAAO,IAAId,WAAJ,CAAgB,uBAAiBc,SAASC,KAAT,EAAjB,CAAhB,CAAP;AACD,KAFM;AAIP;;;;;;;AAOOf,gBAAAgB,cAAA,GAAP,UAAsBf,IAAtB,EAAkC;AAChC,eAAO,IAAID,WAAJ,CAAgB,mBAAaiB,UAAb,CAAwBhB,IAAxB,CAAhB,CAAP;AACD,KAFM;AA3BAD,gBAAAkB,KAAA,GAAQ,IAAIlB,WAAJ,CAAgB,uBAAiB,EAAjB,CAAhB,CAAR;AA8BT,WAAAA,WAAA;AAjDA,CAAA,EAAA;QAAaA,W,GAAAA,W","file":"document_key.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../util/assert';\n\nimport { ResourcePath } from './path';\n\nexport class DocumentKey {\n  constructor(readonly path: ResourcePath) {\n    assert(\n      DocumentKey.isDocumentKey(path),\n      'Invalid DocumentKey with an odd number of segments: ' +\n        path.toArray().join('/')\n    );\n  }\n\n  equals(other: DocumentKey | null): boolean {\n    return (\n      other !== null && ResourcePath.comparator(this.path, other.path) === 0\n    );\n  }\n\n  toString(): string {\n    return this.path.toString();\n  }\n\n  static EMPTY = new DocumentKey(new ResourcePath([]));\n\n  static comparator(k1: DocumentKey, k2: DocumentKey): number {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n\n  static isDocumentKey(path: ResourcePath): boolean {\n    return path.length % 2 === 0;\n  }\n\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param path The segments of the path to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromSegments(segments: string[]): DocumentKey {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n\n  /**\n   * Creates and returns a new document key using '/' to split the string into\n   * segments.\n   *\n   * @param path The slash-separated path string to the document\n   * @return A new instance of DocumentKey\n   */\n  static fromPathString(path: string): DocumentKey {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n}\n"]}