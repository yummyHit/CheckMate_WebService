{"version":3,"sources":["src/firestore/model/document.ts","firestore/model/document.js"],"names":["Document","key","version","data","options","hasLocalMutations","prototype","field","path","fieldValue","value","undefined","equals","other","toString","compareByKey","d1","d2","comparator","compareByField","v1","v2","compareTo","NoDocument"],"mappings":"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","file":"document.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SnapshotVersion } from '../core/snapshot_version';\nimport { fail } from '../util/assert';\nimport { AnyJs } from '../util/misc';\n\nimport { DocumentKey } from './document_key';\nimport { FieldValue, JsonObject, ObjectValue } from './field_value';\nimport { FieldPath } from './path';\n\nexport interface DocumentOptions {\n  hasLocalMutations: boolean;\n}\n\nexport class Document {\n  readonly hasLocalMutations: boolean;\n\n  constructor(\n    readonly key: DocumentKey,\n    readonly version: SnapshotVersion,\n    readonly data: ObjectValue,\n    options: DocumentOptions\n  ) {\n    this.hasLocalMutations = options.hasLocalMutations;\n  }\n\n  field(path: FieldPath): FieldValue {\n    return this.data.field(path);\n  }\n\n  fieldValue(path: FieldPath): AnyJs {\n    const field = this.field(path);\n    return field ? field.value() : undefined;\n  }\n\n  value(): JsonObject<AnyJs> {\n    return this.data.value();\n  }\n\n  equals(other: Document | null | undefined): boolean {\n    return (\n      other instanceof Document &&\n      this.key.equals(other.key) &&\n      this.version.equals(other.version) &&\n      this.data.equals(other.data) &&\n      this.hasLocalMutations === other.hasLocalMutations\n    );\n  }\n\n  toString(): string {\n    return (\n      `Document(${this.key}, ${this.version}, ${this.data.toString()}, ` +\n      `{hasLocalMutations: ${this.hasLocalMutations}})`\n    );\n  }\n\n  static compareByKey(d1: MaybeDocument, d2: MaybeDocument): number {\n    return DocumentKey.comparator(d1.key, d2.key);\n  }\n\n  static compareByField(field: FieldPath, d1: Document, d2: Document): number {\n    const v1 = d1.field(field);\n    const v2 = d2.field(field);\n    if (v1 !== undefined && v2 !== undefined) {\n      return v1.compareTo(v2);\n    } else {\n      return fail(\"Trying to compare documents on fields that don't exist\");\n    }\n  }\n}\n\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nexport class NoDocument {\n  constructor(readonly key: DocumentKey, readonly version: SnapshotVersion) {}\n\n  toString(): string {\n    return `NoDocument(${this.key}, ${this.version})`;\n  }\n\n  public equals(other: NoDocument): boolean {\n    return (\n      other && other.version.equals(this.version) && other.key.equals(this.key)\n    );\n  }\n\n  static compareByKey(d1: MaybeDocument, d2: MaybeDocument): number {\n    return DocumentKey.comparator(d1.key, d2.key);\n  }\n}\n\n/**\n * A union type representing either a full document or a deleted document.\n * The NoDocument is used when it doesn't exist on the server.\n */\nexport type MaybeDocument = Document | NoDocument;\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fail } from '../util/assert';\nimport { DocumentKey } from './document_key';\nvar Document = /** @class */ (function () {\n    function Document(key, version, data, options) {\n        this.key = key;\n        this.version = version;\n        this.data = data;\n        this.hasLocalMutations = options.hasLocalMutations;\n    }\n    Document.prototype.field = function (path) {\n        return this.data.field(path);\n    };\n    Document.prototype.fieldValue = function (path) {\n        var field = this.field(path);\n        return field ? field.value() : undefined;\n    };\n    Document.prototype.value = function () {\n        return this.data.value();\n    };\n    Document.prototype.equals = function (other) {\n        return (other instanceof Document &&\n            this.key.equals(other.key) &&\n            this.version.equals(other.version) &&\n            this.data.equals(other.data) &&\n            this.hasLocalMutations === other.hasLocalMutations);\n    };\n    Document.prototype.toString = function () {\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + this.data.toString() + \", \" +\n            (\"{hasLocalMutations: \" + this.hasLocalMutations + \"})\"));\n    };\n    Document.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    Document.compareByField = function (field, d1, d2) {\n        var v1 = d1.field(field);\n        var v2 = d2.field(field);\n        if (v1 !== undefined && v2 !== undefined) {\n            return v1.compareTo(v2);\n        }\n        else {\n            return fail(\"Trying to compare documents on fields that don't exist\");\n        }\n    };\n    return Document;\n}());\nexport { Document };\n/**\n * A class representing a deleted document.\n * Version is set to 0 if we don't point to any specific time, otherwise it\n * denotes time we know it didn't exist at.\n */\nvar NoDocument = /** @class */ (function () {\n    function NoDocument(key, version) {\n        this.key = key;\n        this.version = version;\n    }\n    NoDocument.prototype.toString = function () {\n        return \"NoDocument(\" + this.key + \", \" + this.version + \")\";\n    };\n    NoDocument.prototype.equals = function (other) {\n        return (other && other.version.equals(this.version) && other.key.equals(this.key));\n    };\n    NoDocument.compareByKey = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n    };\n    return NoDocument;\n}());\nexport { NoDocument };\n\n\n"]}