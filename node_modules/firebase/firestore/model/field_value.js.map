{"version":3,"sources":["src/firestore/model/field_value.ts","firestore/model/field_value.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","TypeOrder","FieldValue","toString","val","value","defaultCompareTo","other","typeOrder","cmp","NullValue","_super","_this","call","internalValue","equals","compareTo","INSTANCE","BooleanValue","of","TRUE","FALSE","NumberValue","numericComparator","left","right","isNaN","numericEquals","IntegerValue","DoubleValue","NAN","NaN","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","StringValue","TimestampValue","toDate","ServerTimestampValue","localWriteTime","BlobValue","_equals","_compareTo","RefValue","databaseId","key","comparator","GeoPointValue","ObjectValue","result","inorderTraversal","forEach","action","it1","getIterator","it2","hasNext","next1","getNext","next2","set","path","to","isEmpty","length","setChild","firstSegment","child","EMPTY","newChild","popFirst","delete","remove","insert","contains","field","undefined","pathSegment","get","JSON","stringify","childName","ArrayValue","map","v","i","minLength","Math","min"],"mappings":"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","file":"field_value.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Blob } from '../api/blob';\nimport { GeoPoint } from '../api/geo_point';\nimport { DatabaseId } from '../core/database_info';\nimport { Timestamp } from '../core/timestamp';\nimport { assert, fail } from '../util/assert';\nimport { AnyJs, primitiveComparator } from '../util/misc';\nimport * as objUtils from '../util/obj';\nimport { SortedMap } from '../util/sorted_map';\nimport * as typeUtils from '../util/types';\n\nimport { DocumentKey } from './document_key';\nimport { FieldPath } from './path';\n\n/**\n * Supported data value types:\n *  - Null\n *  - Boolean\n *  - Long\n *  - Double\n *  - String\n *  - Object\n *  - Array\n *  - Binary\n *  - Timestamp\n *  - ServerTimestamp (a sentinel used in uncommitted writes)\n *  - GeoPoint\n *  - (Document) References\n */\n\nexport interface JsonObject<T> {\n  [name: string]: T;\n}\n\nexport enum TypeOrder {\n  // This order is defined by the backend.\n  NullValue = 0,\n  BooleanValue = 1,\n  NumberValue = 2,\n  TimestampValue = 3,\n  StringValue = 4,\n  BlobValue = 5,\n  RefValue = 6,\n  GeoPointValue = 7,\n  ArrayValue = 8,\n  ObjectValue = 9\n}\n\n/**\n * Potential types returned by FieldValue.value(). This could be stricter\n * (instead of using {}), but there's little benefit.\n *\n * Note that currently we use AnyJs (which is identical except includes\n * undefined) for incoming user data as a convenience to the calling code (but\n * we'll throw if the data contains undefined). This should probably be changed\n * to use FieldType, but all consuming code will have to be updated to\n * explicitly handle undefined and then cast to FieldType or similar. Perhaps\n * we should tackle this when adding robust argument validation to the API.\n */\nexport type FieldType = null | boolean | number | string | {};\n\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nexport abstract class FieldValue {\n  readonly typeOrder: TypeOrder;\n\n  abstract value(): FieldType;\n  abstract equals(other: FieldValue): boolean;\n  abstract compareTo(other: FieldValue): number;\n\n  toString(): string {\n    const val = this.value();\n    return val === null ? 'null' : val.toString();\n  }\n\n  defaultCompareTo(other: FieldValue): number {\n    assert(\n      this.typeOrder !== other.typeOrder,\n      'Default compareTo should not be used for values of same type.'\n    );\n    const cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n    return cmp;\n  }\n}\n\nexport class NullValue extends FieldValue {\n  typeOrder = TypeOrder.NullValue;\n\n  // internalValue is unused but we add it to work around\n  // https://github.com/Microsoft/TypeScript/issues/15585\n  readonly internalValue = null;\n\n  private constructor() {\n    super();\n  }\n\n  value(): FieldType {\n    return null;\n  }\n\n  equals(other: FieldValue): boolean {\n    return other instanceof NullValue;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof NullValue) {\n      return 0;\n    }\n    return this.defaultCompareTo(other);\n  }\n\n  static INSTANCE = new NullValue();\n}\n\nexport class BooleanValue extends FieldValue {\n  typeOrder = TypeOrder.BooleanValue;\n\n  private constructor(readonly internalValue: boolean) {\n    super();\n  }\n\n  value(): boolean {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof BooleanValue &&\n      this.internalValue === other.internalValue\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof BooleanValue) {\n      return primitiveComparator(this, other);\n    }\n    return this.defaultCompareTo(other);\n  }\n\n  static of(value: boolean): BooleanValue {\n    return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n  }\n\n  static TRUE = new BooleanValue(true);\n  static FALSE = new BooleanValue(false);\n}\n\n/** Base class for IntegerValue and DoubleValue. */\nexport abstract class NumberValue extends FieldValue {\n  typeOrder = TypeOrder.NumberValue;\n\n  constructor(readonly internalValue: number) {\n    super();\n  }\n\n  value(): number {\n    return this.internalValue;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof NumberValue) {\n      return numericComparator(this.internalValue, other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left: number, right: number): number {\n  if (left < right) {\n    return -1;\n  } else if (left > right) {\n    return 1;\n  } else if (left === right) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(left)) {\n      return isNaN(right) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left: number, right: number): boolean {\n  // Implemented based on Object.is() polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  if (left === right) {\n    // +0 != -0\n    return left !== 0 || 1 / left === 1 / right;\n  } else {\n    // NaN == NaN\n    return left !== left && right !== right;\n  }\n}\n\nexport class IntegerValue extends NumberValue {\n  constructor(internalValue: number) {\n    super(internalValue);\n  }\n\n  equals(other: FieldValue): boolean {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof IntegerValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  }\n\n  // NOTE: compareTo() is implemented in NumberValue.\n}\n\nexport class DoubleValue extends NumberValue {\n  constructor(readonly internalValue: number) {\n    super(internalValue);\n  }\n\n  static NAN = new DoubleValue(NaN);\n  static POSITIVE_INFINITY = new DoubleValue(Infinity);\n  static NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n\n  equals(other: FieldValue): boolean {\n    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n    // but that doesn't make them equal via equals().\n    if (other instanceof DoubleValue) {\n      return numericEquals(this.internalValue, other.internalValue);\n    } else {\n      return false;\n    }\n  }\n\n  // NOTE: compareTo() is implemented in NumberValue.\n}\n\n// TODO(b/37267885): Add truncation support\nexport class StringValue extends FieldValue {\n  typeOrder = TypeOrder.StringValue;\n\n  constructor(readonly internalValue: string) {\n    super();\n  }\n\n  value(): string {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof StringValue && this.internalValue === other.internalValue\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof StringValue) {\n      return primitiveComparator(this.internalValue, other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class TimestampValue extends FieldValue {\n  typeOrder = TypeOrder.TimestampValue;\n\n  constructor(readonly internalValue: Timestamp) {\n    super();\n  }\n\n  value(): Date {\n    return this.internalValue.toDate();\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof TimestampValue &&\n      this.internalValue.equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof TimestampValue) {\n      return this.internalValue.compareTo(other.internalValue);\n    } else if (other instanceof ServerTimestampValue) {\n      // Concrete timestamps come before server timestamps.\n      return -1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n}\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nexport class ServerTimestampValue extends FieldValue {\n  typeOrder = TypeOrder.TimestampValue;\n\n  constructor(readonly localWriteTime: Timestamp) {\n    super();\n  }\n\n  value(): null {\n    return null;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof ServerTimestampValue &&\n      this.localWriteTime.equals(other.localWriteTime)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ServerTimestampValue) {\n      return this.localWriteTime.compareTo(other.localWriteTime);\n    } else if (other instanceof TimestampValue) {\n      // Server timestamps come after all concrete timestamps.\n      return 1;\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  toString(): string {\n    return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n  }\n}\n\nexport class BlobValue extends FieldValue {\n  typeOrder = TypeOrder.BlobValue;\n\n  constructor(readonly internalValue: Blob) {\n    super();\n  }\n\n  value(): Blob {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof BlobValue &&\n      this.internalValue._equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof BlobValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class RefValue extends FieldValue {\n  typeOrder = TypeOrder.RefValue;\n\n  constructor(readonly databaseId: DatabaseId, readonly key: DocumentKey) {\n    super();\n  }\n\n  value(): DocumentKey {\n    return this.key;\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof RefValue) {\n      return (\n        this.key.equals(other.key) && this.databaseId.equals(other.databaseId)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof RefValue) {\n      const cmp = this.databaseId.compareTo(other.databaseId);\n      return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class GeoPointValue extends FieldValue {\n  typeOrder = TypeOrder.GeoPointValue;\n\n  constructor(readonly internalValue: GeoPoint) {\n    super();\n  }\n\n  value(): GeoPoint {\n    return this.internalValue;\n  }\n\n  equals(other: FieldValue): boolean {\n    return (\n      other instanceof GeoPointValue &&\n      this.internalValue._equals(other.internalValue)\n    );\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof GeoPointValue) {\n      return this.internalValue._compareTo(other.internalValue);\n    }\n    return this.defaultCompareTo(other);\n  }\n}\n\nexport class ObjectValue extends FieldValue {\n  typeOrder = TypeOrder.ObjectValue;\n\n  constructor(readonly internalValue: SortedMap<string, FieldValue>) {\n    super();\n  }\n\n  value(): JsonObject<FieldType> {\n    const result: JsonObject<FieldType> = {};\n    this.internalValue.inorderTraversal((key, val) => {\n      result[key] = val.value();\n    });\n    return result;\n  }\n\n  forEach(action: (key: string, value: FieldValue) => void): void {\n    this.internalValue.inorderTraversal(action);\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof ObjectValue) {\n      const it1 = this.internalValue.getIterator();\n      const it2 = other.internalValue.getIterator();\n      while (it1.hasNext() && it2.hasNext()) {\n        const next1: { key: string; value: FieldValue } = it1.getNext();\n        const next2: { key: string; value: FieldValue } = it2.getNext();\n        if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n          return false;\n        }\n      }\n\n      return !it1.hasNext() && !it2.hasNext();\n    }\n\n    return false;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ObjectValue) {\n      const it1 = this.internalValue.getIterator();\n      const it2 = other.internalValue.getIterator();\n      while (it1.hasNext() && it2.hasNext()) {\n        const next1: { key: string; value: FieldValue } = it1.getNext();\n        const next2: { key: string; value: FieldValue } = it2.getNext();\n        const cmp =\n          primitiveComparator(next1.key, next2.key) ||\n          next1.value.compareTo(next2.value);\n        if (cmp) {\n          return cmp;\n        }\n      }\n\n      // Only equal if both iterators are exhausted\n      return primitiveComparator(it1.hasNext(), it2.hasNext());\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  set(path: FieldPath, to: FieldValue): ObjectValue {\n    assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n    if (path.length === 1) {\n      return this.setChild(path.firstSegment(), to);\n    } else {\n      let child = this.child(path.firstSegment());\n      if (!(child instanceof ObjectValue)) {\n        child = ObjectValue.EMPTY;\n      }\n      const newChild = (child as ObjectValue).set(path.popFirst(), to);\n      return this.setChild(path.firstSegment(), newChild);\n    }\n  }\n\n  delete(path: FieldPath): ObjectValue {\n    assert(\n      !path.isEmpty(),\n      'Cannot delete field for empty path on ObjectValue'\n    );\n    if (path.length === 1) {\n      return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n    } else {\n      // nested field\n      const child = this.child(path.firstSegment());\n      if (child instanceof ObjectValue) {\n        const newChild = child.delete(path.popFirst());\n        return new ObjectValue(\n          this.internalValue.insert(path.firstSegment(), newChild)\n        );\n      } else {\n        // Don't actually change a primitive value to an object for a delete\n        return this;\n      }\n    }\n  }\n\n  contains(path: FieldPath): boolean {\n    return this.field(path) !== undefined;\n  }\n\n  field(path: FieldPath): FieldValue {\n    assert(!path.isEmpty(), \"Can't get field of empty path\");\n    let field: FieldValue | undefined = this;\n    path.forEach((pathSegment: string) => {\n      if (field instanceof ObjectValue) {\n        field = field.internalValue.get(pathSegment) || undefined;\n      } else {\n        field = undefined;\n      }\n    });\n    return field;\n  }\n\n  toString(): string {\n    return JSON.stringify(this.value());\n  }\n\n  private child(childName: string): FieldValue | undefined {\n    return this.internalValue.get(childName) || undefined;\n  }\n\n  private setChild(childName: string, value: FieldValue): ObjectValue {\n    return new ObjectValue(this.internalValue.insert(childName, value));\n  }\n\n  static EMPTY = new ObjectValue(\n    new SortedMap<string, FieldValue>(primitiveComparator)\n  );\n}\n\nexport class ArrayValue extends FieldValue {\n  typeOrder = TypeOrder.ArrayValue;\n\n  constructor(readonly internalValue: FieldValue[]) {\n    super();\n  }\n\n  value(): FieldType[] {\n    return this.internalValue.map(v => v.value());\n  }\n\n  forEach(action: (value: FieldValue) => void): void {\n    this.internalValue.forEach(action);\n  }\n\n  equals(other: FieldValue): boolean {\n    if (other instanceof ArrayValue) {\n      if (this.internalValue.length !== other.internalValue.length) {\n        return false;\n      }\n\n      for (let i = 0; i < this.internalValue.length; i++) {\n        if (!this.internalValue[i].equals(other.internalValue[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  compareTo(other: FieldValue): number {\n    if (other instanceof ArrayValue) {\n      const minLength = Math.min(\n        this.internalValue.length,\n        other.internalValue.length\n      );\n\n      for (let i = 0; i < minLength; i++) {\n        const cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n\n        if (cmp) {\n          return cmp;\n        }\n      }\n\n      return primitiveComparator(\n        this.internalValue.length,\n        other.internalValue.length\n      );\n    } else {\n      return this.defaultCompareTo(other);\n    }\n  }\n\n  toString(): string {\n    return JSON.stringify(this.value());\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../util/assert';\nimport { primitiveComparator } from '../util/misc';\nimport { SortedMap } from '../util/sorted_map';\nimport { DocumentKey } from './document_key';\nexport var TypeOrder;\n(function (TypeOrder) {\n    // This order is defined by the backend.\n    TypeOrder[TypeOrder[\"NullValue\"] = 0] = \"NullValue\";\n    TypeOrder[TypeOrder[\"BooleanValue\"] = 1] = \"BooleanValue\";\n    TypeOrder[TypeOrder[\"NumberValue\"] = 2] = \"NumberValue\";\n    TypeOrder[TypeOrder[\"TimestampValue\"] = 3] = \"TimestampValue\";\n    TypeOrder[TypeOrder[\"StringValue\"] = 4] = \"StringValue\";\n    TypeOrder[TypeOrder[\"BlobValue\"] = 5] = \"BlobValue\";\n    TypeOrder[TypeOrder[\"RefValue\"] = 6] = \"RefValue\";\n    TypeOrder[TypeOrder[\"GeoPointValue\"] = 7] = \"GeoPointValue\";\n    TypeOrder[TypeOrder[\"ArrayValue\"] = 8] = \"ArrayValue\";\n    TypeOrder[TypeOrder[\"ObjectValue\"] = 9] = \"ObjectValue\";\n})(TypeOrder || (TypeOrder = {}));\n/**\n * A field value represents a datatype as stored by Firestore.\n */\nvar FieldValue = /** @class */ (function () {\n    function FieldValue() {\n    }\n    FieldValue.prototype.toString = function () {\n        var val = this.value();\n        return val === null ? 'null' : val.toString();\n    };\n    FieldValue.prototype.defaultCompareTo = function (other) {\n        assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');\n        var cmp = primitiveComparator(this.typeOrder, other.typeOrder);\n        return cmp;\n    };\n    return FieldValue;\n}());\nexport { FieldValue };\nvar NullValue = /** @class */ (function (_super) {\n    __extends(NullValue, _super);\n    function NullValue() {\n        var _this = _super.call(this) || this;\n        _this.typeOrder = TypeOrder.NullValue;\n        // internalValue is unused but we add it to work around\n        // https://github.com/Microsoft/TypeScript/issues/15585\n        _this.internalValue = null;\n        return _this;\n    }\n    NullValue.prototype.value = function () {\n        return null;\n    };\n    NullValue.prototype.equals = function (other) {\n        return other instanceof NullValue;\n    };\n    NullValue.prototype.compareTo = function (other) {\n        if (other instanceof NullValue) {\n            return 0;\n        }\n        return this.defaultCompareTo(other);\n    };\n    NullValue.INSTANCE = new NullValue();\n    return NullValue;\n}(FieldValue));\nexport { NullValue };\nvar BooleanValue = /** @class */ (function (_super) {\n    __extends(BooleanValue, _super);\n    function BooleanValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BooleanValue;\n        return _this;\n    }\n    BooleanValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BooleanValue.prototype.equals = function (other) {\n        return (other instanceof BooleanValue &&\n            this.internalValue === other.internalValue);\n    };\n    BooleanValue.prototype.compareTo = function (other) {\n        if (other instanceof BooleanValue) {\n            return primitiveComparator(this, other);\n        }\n        return this.defaultCompareTo(other);\n    };\n    BooleanValue.of = function (value) {\n        return value ? BooleanValue.TRUE : BooleanValue.FALSE;\n    };\n    BooleanValue.TRUE = new BooleanValue(true);\n    BooleanValue.FALSE = new BooleanValue(false);\n    return BooleanValue;\n}(FieldValue));\nexport { BooleanValue };\n/** Base class for IntegerValue and DoubleValue. */\nvar NumberValue = /** @class */ (function (_super) {\n    __extends(NumberValue, _super);\n    function NumberValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.NumberValue;\n        return _this;\n    }\n    NumberValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    NumberValue.prototype.compareTo = function (other) {\n        if (other instanceof NumberValue) {\n            return numericComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return NumberValue;\n}(FieldValue));\nexport { NumberValue };\n/** Utility function to compare doubles (using Firestore semantics for NaN). */\nfunction numericComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    else if (left > right) {\n        return 1;\n    }\n    else if (left === right) {\n        return 0;\n    }\n    else {\n        // one or both are NaN.\n        if (isNaN(left)) {\n            return isNaN(right) ? 0 : -1;\n        }\n        else {\n            return 1;\n        }\n    }\n}\n/**\n * Utility function to check numbers for equality using Firestore semantics\n * (NaN === NaN, -0.0 !== 0.0).\n */\nfunction numericEquals(left, right) {\n    // Implemented based on Object.is() polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    if (left === right) {\n        // +0 != -0\n        return left !== 0 || 1 / left === 1 / right;\n    }\n    else {\n        // NaN == NaN\n        return left !== left && right !== right;\n    }\n}\nvar IntegerValue = /** @class */ (function (_super) {\n    __extends(IntegerValue, _super);\n    function IntegerValue(internalValue) {\n        return _super.call(this, internalValue) || this;\n    }\n    IntegerValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof IntegerValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    return IntegerValue;\n}(NumberValue));\nexport { IntegerValue };\nvar DoubleValue = /** @class */ (function (_super) {\n    __extends(DoubleValue, _super);\n    function DoubleValue(internalValue) {\n        var _this = _super.call(this, internalValue) || this;\n        _this.internalValue = internalValue;\n        return _this;\n    }\n    DoubleValue.prototype.equals = function (other) {\n        // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,\n        // but that doesn't make them equal via equals().\n        if (other instanceof DoubleValue) {\n            return numericEquals(this.internalValue, other.internalValue);\n        }\n        else {\n            return false;\n        }\n    };\n    DoubleValue.NAN = new DoubleValue(NaN);\n    DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);\n    DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);\n    return DoubleValue;\n}(NumberValue));\nexport { DoubleValue };\n// TODO(b/37267885): Add truncation support\nvar StringValue = /** @class */ (function (_super) {\n    __extends(StringValue, _super);\n    function StringValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.StringValue;\n        return _this;\n    }\n    StringValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    StringValue.prototype.equals = function (other) {\n        return (other instanceof StringValue && this.internalValue === other.internalValue);\n    };\n    StringValue.prototype.compareTo = function (other) {\n        if (other instanceof StringValue) {\n            return primitiveComparator(this.internalValue, other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return StringValue;\n}(FieldValue));\nexport { StringValue };\nvar TimestampValue = /** @class */ (function (_super) {\n    __extends(TimestampValue, _super);\n    function TimestampValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    TimestampValue.prototype.value = function () {\n        return this.internalValue.toDate();\n    };\n    TimestampValue.prototype.equals = function (other) {\n        return (other instanceof TimestampValue &&\n            this.internalValue.equals(other.internalValue));\n    };\n    TimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof TimestampValue) {\n            return this.internalValue.compareTo(other.internalValue);\n        }\n        else if (other instanceof ServerTimestampValue) {\n            // Concrete timestamps come before server timestamps.\n            return -1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    return TimestampValue;\n}(FieldValue));\nexport { TimestampValue };\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   TransformMutation (see TransformMutation.applyTo()). They can only exist in\n *   the local view of a document. Therefore they do not need to be parsed or\n *   serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they evaluate to null.\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nvar ServerTimestampValue = /** @class */ (function (_super) {\n    __extends(ServerTimestampValue, _super);\n    function ServerTimestampValue(localWriteTime) {\n        var _this = _super.call(this) || this;\n        _this.localWriteTime = localWriteTime;\n        _this.typeOrder = TypeOrder.TimestampValue;\n        return _this;\n    }\n    ServerTimestampValue.prototype.value = function () {\n        return null;\n    };\n    ServerTimestampValue.prototype.equals = function (other) {\n        return (other instanceof ServerTimestampValue &&\n            this.localWriteTime.equals(other.localWriteTime));\n    };\n    ServerTimestampValue.prototype.compareTo = function (other) {\n        if (other instanceof ServerTimestampValue) {\n            return this.localWriteTime.compareTo(other.localWriteTime);\n        }\n        else if (other instanceof TimestampValue) {\n            // Server timestamps come after all concrete timestamps.\n            return 1;\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ServerTimestampValue.prototype.toString = function () {\n        return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';\n    };\n    return ServerTimestampValue;\n}(FieldValue));\nexport { ServerTimestampValue };\nvar BlobValue = /** @class */ (function (_super) {\n    __extends(BlobValue, _super);\n    function BlobValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.BlobValue;\n        return _this;\n    }\n    BlobValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    BlobValue.prototype.equals = function (other) {\n        return (other instanceof BlobValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    BlobValue.prototype.compareTo = function (other) {\n        if (other instanceof BlobValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return BlobValue;\n}(FieldValue));\nexport { BlobValue };\nvar RefValue = /** @class */ (function (_super) {\n    __extends(RefValue, _super);\n    function RefValue(databaseId, key) {\n        var _this = _super.call(this) || this;\n        _this.databaseId = databaseId;\n        _this.key = key;\n        _this.typeOrder = TypeOrder.RefValue;\n        return _this;\n    }\n    RefValue.prototype.value = function () {\n        return this.key;\n    };\n    RefValue.prototype.equals = function (other) {\n        if (other instanceof RefValue) {\n            return (this.key.equals(other.key) && this.databaseId.equals(other.databaseId));\n        }\n        else {\n            return false;\n        }\n    };\n    RefValue.prototype.compareTo = function (other) {\n        if (other instanceof RefValue) {\n            var cmp = this.databaseId.compareTo(other.databaseId);\n            return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return RefValue;\n}(FieldValue));\nexport { RefValue };\nvar GeoPointValue = /** @class */ (function (_super) {\n    __extends(GeoPointValue, _super);\n    function GeoPointValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.GeoPointValue;\n        return _this;\n    }\n    GeoPointValue.prototype.value = function () {\n        return this.internalValue;\n    };\n    GeoPointValue.prototype.equals = function (other) {\n        return (other instanceof GeoPointValue &&\n            this.internalValue._equals(other.internalValue));\n    };\n    GeoPointValue.prototype.compareTo = function (other) {\n        if (other instanceof GeoPointValue) {\n            return this.internalValue._compareTo(other.internalValue);\n        }\n        return this.defaultCompareTo(other);\n    };\n    return GeoPointValue;\n}(FieldValue));\nexport { GeoPointValue };\nvar ObjectValue = /** @class */ (function (_super) {\n    __extends(ObjectValue, _super);\n    function ObjectValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ObjectValue;\n        return _this;\n    }\n    ObjectValue.prototype.value = function () {\n        var result = {};\n        this.internalValue.inorderTraversal(function (key, val) {\n            result[key] = val.value();\n        });\n        return result;\n    };\n    ObjectValue.prototype.forEach = function (action) {\n        this.internalValue.inorderTraversal(action);\n    };\n    ObjectValue.prototype.equals = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                if (next1.key !== next2.key || !next1.value.equals(next2.value)) {\n                    return false;\n                }\n            }\n            return !it1.hasNext() && !it2.hasNext();\n        }\n        return false;\n    };\n    ObjectValue.prototype.compareTo = function (other) {\n        if (other instanceof ObjectValue) {\n            var it1 = this.internalValue.getIterator();\n            var it2 = other.internalValue.getIterator();\n            while (it1.hasNext() && it2.hasNext()) {\n                var next1 = it1.getNext();\n                var next2 = it2.getNext();\n                var cmp = primitiveComparator(next1.key, next2.key) ||\n                    next1.value.compareTo(next2.value);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            // Only equal if both iterators are exhausted\n            return primitiveComparator(it1.hasNext(), it2.hasNext());\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ObjectValue.prototype.set = function (path, to) {\n        assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return this.setChild(path.firstSegment(), to);\n        }\n        else {\n            var child = this.child(path.firstSegment());\n            if (!(child instanceof ObjectValue)) {\n                child = ObjectValue.EMPTY;\n            }\n            var newChild = child.set(path.popFirst(), to);\n            return this.setChild(path.firstSegment(), newChild);\n        }\n    };\n    ObjectValue.prototype.delete = function (path) {\n        assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');\n        if (path.length === 1) {\n            return new ObjectValue(this.internalValue.remove(path.firstSegment()));\n        }\n        else {\n            // nested field\n            var child = this.child(path.firstSegment());\n            if (child instanceof ObjectValue) {\n                var newChild = child.delete(path.popFirst());\n                return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));\n            }\n            else {\n                // Don't actually change a primitive value to an object for a delete\n                return this;\n            }\n        }\n    };\n    ObjectValue.prototype.contains = function (path) {\n        return this.field(path) !== undefined;\n    };\n    ObjectValue.prototype.field = function (path) {\n        assert(!path.isEmpty(), \"Can't get field of empty path\");\n        var field = this;\n        path.forEach(function (pathSegment) {\n            if (field instanceof ObjectValue) {\n                field = field.internalValue.get(pathSegment) || undefined;\n            }\n            else {\n                field = undefined;\n            }\n        });\n        return field;\n    };\n    ObjectValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    ObjectValue.prototype.child = function (childName) {\n        return this.internalValue.get(childName) || undefined;\n    };\n    ObjectValue.prototype.setChild = function (childName, value) {\n        return new ObjectValue(this.internalValue.insert(childName, value));\n    };\n    ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));\n    return ObjectValue;\n}(FieldValue));\nexport { ObjectValue };\nvar ArrayValue = /** @class */ (function (_super) {\n    __extends(ArrayValue, _super);\n    function ArrayValue(internalValue) {\n        var _this = _super.call(this) || this;\n        _this.internalValue = internalValue;\n        _this.typeOrder = TypeOrder.ArrayValue;\n        return _this;\n    }\n    ArrayValue.prototype.value = function () {\n        return this.internalValue.map(function (v) { return v.value(); });\n    };\n    ArrayValue.prototype.forEach = function (action) {\n        this.internalValue.forEach(action);\n    };\n    ArrayValue.prototype.equals = function (other) {\n        if (other instanceof ArrayValue) {\n            if (this.internalValue.length !== other.internalValue.length) {\n                return false;\n            }\n            for (var i = 0; i < this.internalValue.length; i++) {\n                if (!this.internalValue[i].equals(other.internalValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    };\n    ArrayValue.prototype.compareTo = function (other) {\n        if (other instanceof ArrayValue) {\n            var minLength = Math.min(this.internalValue.length, other.internalValue.length);\n            for (var i = 0; i < minLength; i++) {\n                var cmp = this.internalValue[i].compareTo(other.internalValue[i]);\n                if (cmp) {\n                    return cmp;\n                }\n            }\n            return primitiveComparator(this.internalValue.length, other.internalValue.length);\n        }\n        else {\n            return this.defaultCompareTo(other);\n        }\n    };\n    ArrayValue.prototype.toString = function () {\n        return JSON.stringify(this.value());\n    };\n    return ArrayValue;\n}(FieldValue));\nexport { ArrayValue };\n\n\n"]}