{"version":3,"sources":["database/src/database/core/view/CacheNode.ts","database/core/view/CacheNode.js"],"names":["CacheNode","node_","fullyInitialized_","filtered_","prototype","isFullyInitialized","isFiltered","isCompleteForPath","path","isEmpty","childKey","getFront","isCompleteForChild","key","hasChild","getNode"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAmBA;;;;;;AAMA,IAAAA,YAAA,aAAA,YAAA;AACE;;;;;AAKA,WAAAA,SAAA,CACUC,KADV,EAEUC,iBAFV,EAGUC,SAHV,EAG4B;AAFlB,SAAAF,KAAA,GAAAA,KAAA;AACA,SAAAC,iBAAA,GAAAA,iBAAA;AACA,SAAAC,SAAA,GAAAA,SAAA;AACN;AAEJ;;;;AAIAH,YAAAI,SAAA,CAAAC,kBAAA,GAAA,YAAA;AACE,WAAO,KAAKH,iBAAZ;AACD,GAFD;AAIA;;;;AAIAF,YAAAI,SAAA,CAAAE,UAAA,GAAA,YAAA;AACE,WAAO,KAAKH,SAAZ;AACD,GAFD;AAIA;;;;AAIAH,YAAAI,SAAA,CAAAG,iBAAA,GAAA,UAAkBC,IAAlB,EAA4B;AAC1B,QAAIA,KAAKC,OAAL,EAAJ,EAAoB;AAClB,aAAO,KAAKJ,kBAAL,MAA6B,CAAC,KAAKF,SAA1C;AACD;AAED,QAAMO,WAAWF,KAAKG,QAAL,EAAjB;AACA,WAAO,KAAKC,kBAAL,CAAwBF,QAAxB,CAAP;AACD,GAPD;AASA;;;;AAIAV,YAAAI,SAAA,CAAAQ,kBAAA,GAAA,UAAmBC,GAAnB,EAA8B;AAC5B,WACG,KAAKR,kBAAL,MAA6B,CAAC,KAAKF,SAApC,IAAkD,KAAKF,KAAL,CAAWa,QAAX,CAAoBD,GAApB,CADpD;AAGD,GAJD;AAMA;;;AAGAb,YAAAI,SAAA,CAAAW,OAAA,GAAA,YAAA;AACE,WAAO,KAAKd,KAAZ;AACD,GAFD;AAGF,SAAAD,SAAA;AAzDA,CAAA,EAAA;QC+CSA,S,GAAAA,S","file":"CacheNode.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nvar CacheNode = /** @class */ (function () {\n    /**\n     * @param {!Node} node_\n     * @param {boolean} fullyInitialized_\n     * @param {boolean} filtered_\n     */\n    function CacheNode(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n     * @return {boolean}\n     */\n    CacheNode.prototype.isFullyInitialized = function () {\n        return this.fullyInitialized_;\n    };\n    /**\n     * Returns whether this node is potentially missing children due to a filter applied to the node\n     * @return {boolean}\n     */\n    CacheNode.prototype.isFiltered = function () {\n        return this.filtered_;\n    };\n    /**\n     * @param {!Path} path\n     * @return {boolean}\n     */\n    CacheNode.prototype.isCompleteForPath = function (path) {\n        if (path.isEmpty()) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        var childKey = path.getFront();\n        return this.isCompleteForChild(childKey);\n    };\n    /**\n     * @param {!string} key\n     * @return {boolean}\n     */\n    CacheNode.prototype.isCompleteForChild = function (key) {\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\n    };\n    /**\n     * @return {!Node}\n     */\n    CacheNode.prototype.getNode = function () {\n        return this.node_;\n    };\n    return CacheNode;\n}());\nexport { CacheNode };\n\n\n"]}