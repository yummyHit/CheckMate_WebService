{"version":3,"sources":["database/src/database/core/view/Change.ts"],"names":["Change","type","snapshotNode","childName","oldSnap","prevName","valueChange","snapshot","VALUE","childAddedChange","childKey","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AASA,IAAAA,SAAA,aAAA,YAAA;AACE,WAAAA,MAAA,CACSC,IADT,EAESC,YAFT,EAGSC,SAHT,EAISC,OAJT,EAKSC,QALT,EAK0B;AAJjB,SAAAJ,IAAA,GAAAA,IAAA;AACA,SAAAC,YAAA,GAAAA,YAAA;AACA,SAAAC,SAAA,GAAAA,SAAA;AACA,SAAAC,OAAA,GAAAA,OAAA;AACA,SAAAC,QAAA,GAAAA,QAAA;AACL;AAEJ;;;;AAIOL,SAAAM,WAAA,GAAP,UAAmBC,QAAnB,EAAiC;AAC/B,WAAO,IAAIP,MAAJ,CAAWA,OAAOQ,KAAlB,EAAyBD,QAAzB,CAAP;AACD,GAFM;AAIP;;;;;AAKOP,SAAAS,gBAAA,GAAP,UAAwBC,QAAxB,EAA0CH,QAA1C,EAAwD;AACtD,WAAO,IAAIP,MAAJ,CAAWA,OAAOW,WAAlB,EAA+BJ,QAA/B,EAAyCG,QAAzC,CAAP;AACD,GAFM;AAIP;;;;;AAKOV,SAAAY,kBAAA,GAAP,UAA0BF,QAA1B,EAA4CH,QAA5C,EAA0D;AACxD,WAAO,IAAIP,MAAJ,CAAWA,OAAOa,aAAlB,EAAiCN,QAAjC,EAA2CG,QAA3C,CAAP;AACD,GAFM;AAIP;;;;;;AAMOV,SAAAc,kBAAA,GAAP,UACEJ,QADF,EAEEK,WAFF,EAGEC,WAHF,EAGmB;AAEjB,WAAO,IAAIhB,MAAJ,CAAWA,OAAOiB,aAAlB,EAAiCF,WAAjC,EAA8CL,QAA9C,EAAwDM,WAAxD,CAAP;AACD,GANM;AAQP;;;;;AAKOhB,SAAAkB,gBAAA,GAAP,UAAwBR,QAAxB,EAA0CH,QAA1C,EAAwD;AACtD,WAAO,IAAIP,MAAJ,CAAWA,OAAOmB,WAAlB,EAA+BZ,QAA/B,EAAyCG,QAAzC,CAAP;AACD,GAFM;AAIP;AACA;AACOV,SAAAW,WAAA,GAAc,aAAd;AAEP;AACOX,SAAAa,aAAA,GAAgB,eAAhB;AAEP;AACOb,SAAAiB,aAAA,GAAgB,eAAhB;AAEP;AACOjB,SAAAmB,WAAA,GAAc,aAAd;AAEP;AACOnB,SAAAQ,KAAA,GAAQ,OAAR;AACT,SAAAR,MAAA;AAzEA,CAAA,EAAA;QAAaA,M,GAAAA,M","file":"Change.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n"]}