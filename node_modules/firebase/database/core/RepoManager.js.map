{"version":3,"sources":["src/database/core/RepoManager.ts","database/core/RepoManager.js"],"names":["DATABASE_URL_OPTION","_staticInstance","RepoManager","repos_","useRestClient_","getInstance","prototype","interrupt","appName","dbUrl","resume","databaseFromApp","app","url","options","undefined","parsedUrl","repoInfo","path","isEmpty","repo","createRepo","database","deleteRepo","appRepos","name","repoInfo_","toURLString","forceRestClient"],"mappings":"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","file":"RepoManager.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '../../app/firebase_app';\nimport { safeGet } from '../../utils/obj';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp, url?: string): Database {\n    const dbUrl: string = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.intializeApp().'\n      );\n    }\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { safeGet } from '../../utils/obj';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\n/** @const {string} */\nvar DATABASE_URL_OPTION = 'databaseURL';\nvar _staticInstance;\n/**\n * Creates and caches Repo instances.\n */\nvar RepoManager = /** @class */ (function () {\n    function RepoManager() {\n        /**\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n         */\n        this.repos_ = {};\n        /**\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n         * @private {boolean}\n         */\n        this.useRestClient_ = false;\n    }\n    RepoManager.getInstance = function () {\n        if (!_staticInstance) {\n            _staticInstance = new RepoManager();\n        }\n        return _staticInstance;\n    };\n    // TODO(koss): Remove these functions unless used in tests?\n    RepoManager.prototype.interrupt = function () {\n        for (var appName in this.repos_) {\n            for (var dbUrl in this.repos_[appName]) {\n                this.repos_[appName][dbUrl].interrupt();\n            }\n        }\n    };\n    RepoManager.prototype.resume = function () {\n        for (var appName in this.repos_) {\n            for (var dbUrl in this.repos_[appName]) {\n                this.repos_[appName][dbUrl].resume();\n            }\n        }\n    };\n    /**\n     * This function should only ever be called to CREATE a new database instance.\n     *\n     * @param {!FirebaseApp} app\n     * @return {!Database}\n     */\n    RepoManager.prototype.databaseFromApp = function (app, url) {\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\n        if (dbUrl === undefined) {\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\n                DATABASE_URL_OPTION +\n                ' option when calling firebase.intializeApp().');\n        }\n        var parsedUrl = parseRepoInfo(dbUrl);\n        var repoInfo = parsedUrl.repoInfo;\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n        if (!parsedUrl.path.isEmpty()) {\n            fatal('Database URL must point to the root of a Firebase Database ' +\n                '(not including a child path).');\n        }\n        var repo = this.createRepo(repoInfo, app);\n        return repo.database;\n    };\n    /**\n     * Remove the repo and make sure it is disconnected.\n     *\n     * @param {!Repo} repo\n     */\n    RepoManager.prototype.deleteRepo = function (repo) {\n        var appRepos = safeGet(this.repos_, repo.app.name);\n        // This should never happen...\n        if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n        }\n        repo.interrupt();\n        delete appRepos[repo.repoInfo_.toURLString()];\n    };\n    /**\n     * Ensures a repo doesn't already exist and then creates one using the\n     * provided app.\n     *\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\n     * @param {!FirebaseApp} app\n     * @return {!Repo} The Repo object for the specified server / repoName.\n     */\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\n        var appRepos = safeGet(this.repos_, app.name);\n        if (!appRepos) {\n            appRepos = {};\n            this.repos_[app.name] = appRepos;\n        }\n        var repo = safeGet(appRepos, repoInfo.toURLString());\n        if (repo) {\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n        }\n        repo = new Repo(repoInfo, this.useRestClient_, app);\n        appRepos[repoInfo.toURLString()] = repo;\n        return repo;\n    };\n    /**\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n     * @param {boolean} forceRestClient\n     */\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\n        this.useRestClient_ = forceRestClient;\n    };\n    return RepoManager;\n}());\nexport { RepoManager };\n\n\n"]}