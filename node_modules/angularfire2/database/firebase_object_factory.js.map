{"version":3,"sources":["../../src/database/firebase_object_factory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AAExE,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,KAAK,QAAQ,MAAM,cAAc,CAAC;AACzC,OAAO,mBAAmB,CAAC;AAC3B,OAAO,KAAK,KAAK,MAAM,UAAU,CAAC;AAGlC,MAAM,gCACJ,OAAsB,EACtB,EAAoD;QAAlD,6DAAgB;IAElB,IAAI,GAAsB,CAAC;IAE3B,KAAK,CAAC,wBAAwB,CAAC,OAAO,EAAE;QACtC,KAAK,EAAE;YACL,IAAM,IAAI,GAAG,OAAiB,CAAC;YAC/B,EAAE,CAAA,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7B,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;YAC5C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,GAAG,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACtC,CAAC;QACH,CAAC;QACD,KAAK,EAAE,cAAM,OAAA,GAAG,GAAsB,OAAO,EAAhC,CAAgC;KAC9C,CAAC,CAAC;IAEH,IAAM,gBAAgB,GAAG,IAAI,wBAAwB,CAAC,UAAC,GAAkB;QACvE,IAAI,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,QAAwC;YAChE,GAAG,CAAC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrE,CAAC,EAAE,UAAA,GAAG;YACJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,cAAM,OAAA,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,EAApB,CAAoB,CAAC;IACpC,CAAC,EAAE,GAAG,CAAC,CAAC;IAGR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AACjF,CAAC","file":"firebase_object_factory.js","sourceRoot":"","sourcesContent":["import { FirebaseObjectObservable } from './firebase_object_observable';\nimport { Observer } from 'rxjs/Observer';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport * as firebase from 'firebase/app';\nimport 'firebase/database';\nimport * as utils from '../utils';\nimport { FirebaseObjectFactoryOpts, PathReference, DatabaseReference } from '../interfaces';\n\nexport function FirebaseObjectFactory (\n  pathRef: PathReference,\n  { preserveSnapshot }: FirebaseObjectFactoryOpts = {}): FirebaseObjectObservable<any> {\n\n  let ref: DatabaseReference;\n\n  utils.checkForUrlOrFirebaseRef(pathRef, {\n    isUrl: () => {\n      const path = pathRef as string;\n      if(utils.isAbsoluteUrl(path)) {\n        ref = firebase.database().refFromURL(path)\n      } else {\n        ref = firebase.database().ref(path);\n      }\n    },\n    isRef: () => ref = <DatabaseReference>pathRef\n  });\n\n  const objectObservable = new FirebaseObjectObservable((obs: Observer<any>) => {\n    let fn = ref.on('value', (snapshot: firebase.database.DataSnapshot) => {\n      obs.next(preserveSnapshot ? snapshot : utils.unwrapMapFn(snapshot))\n    }, err => {\n      if (err) { obs.error(err); obs.complete(); }\n    });\n\n    return () => ref.off('value', fn);\n  }, ref);\n\n  // TODO: should be in the subscription zone instead\n  return observeOn.call(objectObservable, new utils.ZoneScheduler(Zone.current));\n}\n"]}