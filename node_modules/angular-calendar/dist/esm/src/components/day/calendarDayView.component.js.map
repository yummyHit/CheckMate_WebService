{"version":3,"sources":["../../../../../src/components/day/calendarDayView.component.ts"],"names":[],"mappings":"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","file":"calendarDayView.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  OnChanges,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  LOCALE_ID,\n  Inject,\n  OnInit,\n  OnDestroy,\n  TemplateRef\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  DayView,\n  DayViewHour,\n  DayViewHourSegment,\n  DayViewEvent\n} from 'calendar-utils';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport addMinutes from 'date-fns/add_minutes';\nimport { CalendarDragHelper } from '../../providers/calendarDragHelper.provider';\nimport { CalendarResizeHelper } from '../../providers/calendarResizeHelper.provider';\nimport { CalendarEventTimesChangedEvent } from '../../interfaces/calendarEventTimesChangedEvent.interface';\nimport { CalendarUtils } from '../../providers/calendarUtils.provider';\n\n/**\n * @hidden\n */\nconst SEGMENT_HEIGHT: number = 30;\n\n/**\n * @hidden\n */\nconst MINUTES_IN_HOUR: number = 60;\n\n/**\n * @hidden\n */\nexport interface DayViewEventResize {\n  originalTop: number;\n  originalHeight: number;\n  edge: string;\n}\n\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\n\nexport class CalendarDayViewComponent implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n   viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n   events: CalendarEvent[] = [];\n\n  /**\n   * The number of segments in an hour. Must be <= 6\n   */\n   hourSegments: number = 2;\n\n  /**\n   * The day start hours in 24 hour time. Must be 0-23\n   */\n   dayStartHour: number = 0;\n\n  /**\n   * The day start minutes. Must be 0-59\n   */\n   dayStartMinute: number = 0;\n\n  /**\n   * The day end hours in 24 hour time. Must be 0-23\n   */\n   dayEndHour: number = 23;\n\n  /**\n   * The day end minutes. Must be 0-59\n   */\n   dayEndMinute: number = 59;\n\n  /**\n   * The width in pixels of each event on the view\n   */\n   eventWidth: number = 150;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n   refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n   locale: string;\n\n  /**\n   * The grid size to snap resizing and dragging of events to\n   */\n   eventSnapSize: number = 30;\n\n  /**\n   * The placement of the event tooltip\n   */\n   tooltipPlacement: string = 'top';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n   tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n   tooltipAppendToBody: boolean = true;\n\n  /**\n   * A custom template to use to replace the hour segment\n   */\n   hourSegmentTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for all day events\n   */\n   allDayEventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view events\n   */\n   eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n   eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * Called when an event title is clicked\n   */\n  \n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an hour segment is clicked\n   */\n  \n  hourSegmentClicked: EventEmitter<{ date: Date }> = new EventEmitter<{\n    date: Date;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  \n  eventTimesChanged: EventEmitter<\n    CalendarEventTimesChangedEvent\n  > = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current day.\n   * If you add the `cssClass` property to a segment it will add that class to the hour segment in the template\n   */\n  \n  beforeViewRender: EventEmitter<{ body: DayViewHour[] }> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  hours: DayViewHour[] = [];\n\n  /**\n   * @hidden\n   */\n  view: DayView;\n\n  /**\n   * @hidden\n   */\n  width: number = 0;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  currentResizes: Map<DayViewEvent, DayViewEventResize> = new Map();\n\n  /**\n   * @hidden\n   */\n  validateDrag: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n     locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (\n      changes.viewDate ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute\n    ) {\n      this.refreshHourGrid();\n    }\n\n    if (\n      changes.viewDate ||\n      changes.events ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute ||\n      changes.eventWidth\n    ) {\n      this.refreshView();\n    }\n  }\n\n  eventDropped(\n    dropEvent: { dropData?: { event?: CalendarEvent } },\n    segment: DayViewHourSegment\n  ): void {\n    if (dropEvent.dropData && dropEvent.dropData.event) {\n      this.eventTimesChanged.emit({\n        event: dropEvent.dropData.event,\n        newStart: segment.date\n      });\n    }\n  }\n\n  resizeStarted(\n    event: DayViewEvent,\n    resizeEvent: ResizeEvent,\n    dayViewContainer: HTMLElement\n  ): void {\n    this.currentResizes.set(event, {\n      originalTop: event.top,\n      originalHeight: event.height,\n      edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n    });\n    const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n      dayViewContainer\n    );\n    this.validateResize = ({ rectangle }) =>\n      resizeHelper.validateResize({ rectangle });\n    this.cdr.markForCheck();\n  }\n\n  resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(event);\n    if (resizeEvent.edges.top) {\n      event.top = currentResize.originalTop + +resizeEvent.edges.top;\n      event.height = currentResize.originalHeight - +resizeEvent.edges.top;\n    } else if (resizeEvent.edges.bottom) {\n      event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;\n    }\n  }\n\n  resizeEnded(dayEvent: DayViewEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(dayEvent);\n\n    let pixelsMoved: number;\n    if (currentResize.edge === 'top') {\n      pixelsMoved = dayEvent.top - currentResize.originalTop;\n    } else {\n      pixelsMoved = dayEvent.height - currentResize.originalHeight;\n    }\n\n    dayEvent.top = currentResize.originalTop;\n    dayEvent.height = currentResize.originalHeight;\n\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);\n    const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;\n    let newStart: Date = dayEvent.event.start;\n    let newEnd: Date = dayEvent.event.end;\n    if (currentResize.edge === 'top') {\n      newStart = addMinutes(newStart, minutesMoved);\n    } else if (newEnd) {\n      newEnd = addMinutes(newEnd, minutesMoved);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n    this.currentResizes.delete(dayEvent);\n  }\n\n  dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      dayViewContainer,\n      event\n    );\n    this.validateDrag = ({ x, y }) =>\n      this.currentResizes.size === 0 && dragHelper.validateDrag({ x, y });\n    this.cdr.markForCheck();\n  }\n\n  eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);\n    const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;\n    const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);\n    let newEnd: Date;\n    if (dayEvent.event.end) {\n      newEnd = addMinutes(dayEvent.event.end, minutesMoved);\n    }\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n  }\n\n  private refreshHourGrid(): void {\n    this.hours = this.utils.getDayViewHourGrid({\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      }\n    });\n    this.beforeViewRender.emit({\n      body: this.hours\n    });\n  }\n\n  private refreshView(): void {\n    this.view = this.utils.getDayView({\n      events: this.events,\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      },\n      eventWidth: this.eventWidth,\n      segmentHeight: SEGMENT_HEIGHT\n    });\n  }\n\n  private refreshAll(): void {\n    this.refreshHourGrid();\n    this.refreshView();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mwl-calendar-day-view',\n  template: `\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <mwl-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        [eventTitleTemplate]=\"eventTitleTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </mwl-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events\"\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"dayEvent.event.draggable\"\n            [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n            [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n            [ngClass]=\"dayEvent.event.cssClass\"\n            mwlResizable\n            [resizeEdges]=\"{top: dayEvent.event?.resizable?.beforeStart, bottom: dayEvent.event?.resizable?.afterEnd}\"\n            [resizeSnapGrid]=\"{top: eventSnapSize, bottom: eventSnapSize}\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"resizeStarted(dayEvent, $event, dayViewContainer)\"\n            (resizing)=\"resizing(dayEvent, $event)\"\n            (resizeEnd)=\"resizeEnded(dayEvent)\"\n            mwlDraggable\n            [dragAxis]=\"{x: false, y: dayEvent.event.draggable && currentResizes.size === 0}\"\n            [dragSnapGrid]=\"{y: eventSnapSize}\"\n            [validateDrag]=\"validateDrag\"\n            (dragStart)=\"dragStart(event, dayViewContainer)\"\n            (dragEnd)=\"eventDragged(dayEvent, $event.y)\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <mwl-calendar-day-view-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              (eventClicked)=\"eventClicked.emit({event: dayEvent.event})\">\n            </mwl-calendar-day-view-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"view?.width + 70\">\n          <mwl-calendar-day-view-hour-segment\n            *ngFor=\"let segment of hour.segments\"\n            [segment]=\"segment\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (mwlClick)=\"hourSegmentClicked.emit({date: segment.date})\"\n            [class.cal-drag-over]=\"segment.dragOver\"\n            mwlDroppable\n            (dragEnter)=\"segment.dragOver = true\"\n            (dragLeave)=\"segment.dragOver = false\"\n            (drop)=\"segment.dragOver = false; eventDropped($event, segment)\">\n          </mwl-calendar-day-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: CalendarUtils, },\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'viewDate': [{ type: Input },],\n'events': [{ type: Input },],\n'hourSegments': [{ type: Input },],\n'dayStartHour': [{ type: Input },],\n'dayStartMinute': [{ type: Input },],\n'dayEndHour': [{ type: Input },],\n'dayEndMinute': [{ type: Input },],\n'eventWidth': [{ type: Input },],\n'refresh': [{ type: Input },],\n'locale': [{ type: Input },],\n'eventSnapSize': [{ type: Input },],\n'tooltipPlacement': [{ type: Input },],\n'tooltipTemplate': [{ type: Input },],\n'tooltipAppendToBody': [{ type: Input },],\n'hourSegmentTemplate': [{ type: Input },],\n'allDayEventTemplate': [{ type: Input },],\n'eventTemplate': [{ type: Input },],\n'eventTitleTemplate': [{ type: Input },],\n'eventClicked': [{ type: Output },],\n'hourSegmentClicked': [{ type: Output },],\n'eventTimesChanged': [{ type: Output },],\n'beforeViewRender': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}